<?php

namespace App\Http\Controllers\Users;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use App\model\Users\UserInfo;
use App\model\Users\RadCheck;
use App\model\Users\RadAcct;
use App\model\Users\DealerProfileRate;
use App\model\Users\DealerFUP;
use App\model\Users\SubdealerProfileRate;
use App\model\Users\TraderProfileRate;
use App\model\Users\ResellerProfileRate;
use App\model\Users\ManagerProfileRate;
use App\model\Users\RaduserGroup;
use App\model\Users\Radreply;
use App\model\Users\UserIPStatus;
use App\model\Users\UserStatusInfo;
use App\model\Users\UserUsualIP;
use App\model\Users\UserAmount;
use App\model\Users\Profile;
use App\model\Users\CactiGraph;
use App\model\Users\Nas;
use App\model\Users\AssignNasType;
use App\model\Users\UserExpireLog;
use App\model\Users\ExpireUser;
use App\model\Users\StaticIPServer;
use Illuminate\Support\Facades\DB;
use App\model\Users\StaticIp;
use App\model\Users\UserVerification;
use App\model\Users\DisabledUser;
use App\model\Users\Dhcp_server;
use App\model\Users\Dhcp_dealer_server;
use App\model\Users\PartnerThemesUser;

use Session;
use App\model\Users\FreezeAccount;
use App\model\Users\ChangePlan;
use App\model\Users\userAccess;
use App\model\Users\ProfileMargins;
use PDF;
use App\model\Users\NeverExpire;
use App\model\Users\SubMenu;
use App\model\Users\UserMenuAccess;
use DataTables;
use DateTime;
use App\model\Users\Cirprofile;
use App\model\Users\Domain;


class UserController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
    }

    public function index()
    {
         die("test...");
        return view("users.dealer.Aslamview_users");
    }

    public function index1($status, Request $request)
    {

        $manager_id = Auth::user()->manager_id;
        $resellerid = Auth::user()->resellerid;
        $dealerid = Auth::user()->dealerid;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $trader_id = Auth::user()->trader_id;
        $numShow = $request->get("countFilter");
        if ($numShow == "") {
            $numShow = 10;
        }

        switch ($status) {
            case "reseller":
                if (
                    Auth::user()->status == "manager" &&
                    Auth::user()->manager_id == $manager_id
                ) {
                    $resellerCollection = UserInfo::where([
                        "status" => "reseller",
                        "manager_id" => $manager_id,
                    ])->get();
                } else {
                    return redirect()->route("users.dashboard");
                }

                return view("users.manager.view_reseler", [
                    "resellerCollection" => $resellerCollection,
                ]);
                break;
            case "dealer":
                $resellerid = Auth::user()->resellerid;

                $dealerCollection = UserInfo::where([
                    "status" => "dealer",
                    "resellerid" => $resellerid,
                ])->get();

                return view("users.reseller.view_dealer", [
                    "dealerCollection" => $dealerCollection,
                ]);
                break;
            case "plan":
                $dealerid = Auth::user()->dealerid;
                if (
                    Auth::user()->status == "dealer" &&
                    Auth::user()->dealerid == $dealerid
                ) {
                    $subdealerCollection = UserInfo::where([
                        "status" => "subdealer",
                        "dealerid" => Auth::user()->dealerid,
                    ])->get();
                } else {
                    return redirect()->route("users.dashboard");
                }

                return view("users.billing.changeplan", [
                    "subdealerCollection" => $subdealerCollection,
                ]);
                break;

            case "subdealer":
                // if(Auth::user()->status == 'dealer'){
                //   $userAuth = Auth::user();
                //   $checkFreeze ='';
                //   $freeze_account = FreezeAccount::where(['username' => $userAuth->username])->first();
                //   $checkFreeze = $freeze_account['freeze'];

                //   if(!empty($freeze_account)){
                //     if($checkFreeze == 'yes'){
                //       return redirect()->route('users.dashboard');
                //     }
                //   }
                // }

                // $check = '';
                // $data = DealerProfileRate::where('dealerid',$dealerid)->select('show_sub_dealer')->first();
                // $check = $data['show_sub_dealer'];

                $subdealerCollection = UserInfo::where([
                    "status" => "subdealer",
                    "resellerid" => $resellerid,
                    "dealerid" => $dealerid,
                ])->get();

                if (Auth::user()->status == "reseller") {
                    return view("users.reseller.view_sub_dealer", [
                        "subdealerCollection" => $subdealerCollection,
                    ]);
                } elseif (Auth::user()->status == "dealer") {
                    return view("users.dealer.view_sub_dealer", [
                        "subdealerCollection" => $subdealerCollection,
                    ]);
                } else {
                    return redirect()->route("users.dashboard");
                }
                break;
            case "trader":
                if (Auth::user()->status == "subdealer") {
                    $traderCollection = UserInfo::where([
                        "status" => "trader",
                        "sub_dealer_id" => Auth::user()->sub_dealer_id,
                    ])->get();
                    return view("users.sub_dealer.view_trader", [
                        "traderCollection" => $traderCollection,
                    ]);
                } else {
                    return redirect()->route("users.dashboard");
                }
                break;
            //uzair customers  =user
            case "user":
                return view("users.dealer.view_users");
                break;
            case "online":
                return view("users.dealer.online_user");
                $arr = [];
                $dealerid = Auth::user()->dealerid;
                $currentStatus = Auth::user()->status;
                $sub_dealer_id = Auth::user()->sub_dealer_id;
                if ($currentStatus == "dealer") {
                    // $userDealer = UserInfo::where(['dealerid' => $dealerid ,'status' => 'user','attribute' => 'Cleartext-Password'])->select('username','dealerid')->get();
                } elseif ($currentStatus == "subdealer") {
                    $userDealer = UserInfo::where([
                        "sub_dealer_id" => Auth::user()->sub_dealer_id,
                        "status" => "user",
                    ])
                        ->select("username", "sub_dealer_id")
                        ->get();
                } elseif ($currentStatus == "trader") {
                    $userDealer = UserInfo::where([
                        "trader_id" => Auth::user()->trader_id,
                        "status" => "user",
                    ])
                        ->select("username", "sub_dealer_id")
                        ->get();
                } elseif (
                    $currentStatus == "inhouse" &&
                    $sub_dealer_id == Auth::user()->sub_dealer_id
                ) {
                    $userDealer = UserInfo::where([
                        "sub_dealer_id" => Auth::user()->sub_dealer_id,
                        "status" => "user",
                    ])
                        ->select("username", "sub_dealer_id")
                        ->get();
                } elseif ($currentStatus == "inhouse") {
                    $userDealer = UserInfo::where("dealerid", $dealerid)
                        ->where("status", "user")
                        ->select("username", "dealerid")
                        ->get();
                }
                foreach ($userDealer as $value) {
                    $dealerids = $value->dealerid;
                    $online = RadAcct::where([
                        "acctstoptime" => null,
                        "username" => $value->username,
                    ])->get();
                    foreach ($online as $value) {
                        $arr[] = $value;
                    }
                }
                //   $num = count($arr);
                return view("users.dealer.online_user", [
                    "arr" => $arr,
                    "dealerids" => $dealerids,
                ]);
                break;
            case "expire":
                return view("users.billing.expired_user");
                break;
            case "terminate":
                return view("users.billing.terminated_user");
                break;
            default:
                return redirect()->route("users.dashboard");
        }
    }
    public function viewCustomerServerSideUser(Request $request)
    {
        $dealerid = Auth::user()->dealerid;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $status = Auth::user()->status;

        $dealerid = Auth::user()->dealerid;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $trader_id = Auth::user()->trader_id;
        $status = Auth::user()->status;
        $date = date("Y-m-d");
        $usersCollection = [];
        $currentStatus = Auth::user()->status;
        if ($currentStatus == "dealer") {
            $userDealer = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where([
                    "user_info.dealerid" => $dealerid,
                    "user_info.status" => "user",
                ])
                ->where(function ($q) {
                    $q->where(
                        "user_status_info.expire_datetime",
                        ">=",
                        date("Y-m-d H:i:s")
                    );
                })
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                    "never_expire",
                ]);
        } elseif ($currentStatus == "subdealer") {
            $userDealer = UserInfo::leftJoin("user_status_info", function (
                $join
            ) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where([
                    "user_info.sub_dealer_id" => $sub_dealer_id,
                    "user_info.status" => "user",
                ])
                ->where(function ($q) {
                    $q->where(
                        "user_status_info.expire_datetime",
                        ">=",
                        date("Y-m-d H:i:s")
                    );
                })
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                    "never_expire",
                ]);
        } elseif ($currentStatus == "trader") {
            $userDealer = UserInfo::leftJoin("user_status_info", function (
                $join
            ) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where([
                    "user_info.trader_id" => $trader_id,
                    "user_info.status" => "user",
                ])
                ->where(function ($q) {
                    $q->where(
                        "user_status_info.expire_datetime",
                        ">=",
                        date("Y-m-d H:i:s")
                    );
                })
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                    "never_expire",
                ]);
        } elseif ($currentStatus == "inhouse" && $sub_dealer_id != "") {
            $userDealer = UserInfo::leftJoin("user_status_info", function (
                $join
            ) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where([
                    "user_info.sub_dealer_id" => $sub_dealer_id,
                    "user_info.status" => "user",
                ])
                ->where(function ($q) {
                    $q->where(
                        "user_status_info.expire_datetime",
                        ">=",
                        date("Y-m-d H:i:s")
                    );
                })
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                    "never_expire",
                ]);
        } elseif (
            $currentStatus == "inhouse" &&
            $dealerid == Auth::user()->dealerid
        ) {
            $userDealer = UserInfo::leftJoin("user_status_info", function (
                $join
            ) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where([
                    "user_info.dealerid" => $dealerid,
                    "user_info.status" => "user",
                ])
                ->where(function ($q) {
                    $q->where(
                        "user_status_info.expire_datetime",
                        ">=",
                        date("Y-m-d H:i:s")
                    );
                })
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                    "never_expire",
                ]);
        } else {
            return redirect()->route("users.dashboard");
        }

        $sno = 1;
        $pro_groupname = "";

        return Datatables::of($userDealer)
            ->addColumn("action", function ($row) {
                $html =
                    '<a href="/users/user/user?id=' .
                    $row->id .
                    '" class="btn btn-info btn-xs" style="border-radius:7px;"><i class="fa fa-user"></i> View</a> ';
                $html .=
                    '<a href="/users/users/user/' .
                    $row->id .
                    '" class="btn btn-primary mb1 bg-olive btn-xs" style="border-radius:7px;"><i class="fa fa-edit"></i> Edit</a>';
                if ($row->profile == "DISABLED") {
                    $html .=
                        '<a href="#" class="btn btn-danger btn-xs  mb1 bg-olive btn-xs" disabled style="border-radius:7px;"><i class="fa fa-ban"></i>  DISABLED</a>';
                }
                // elseif($row->expire_datetime > date('Y-m-d 12:00:00') && $row->never_expire != "yes"){
                // $html .= '<a href="#" class="btn btn-success btn-xs mb1 bg-olive btn-xs " disabled style="border-radius:7px;"><i class="fa fa-recycle"></i> Recharge</a>';
                // }
                elseif ($row->never_expire == "yes") {
                    $html .=
                        '<a href="#" class="btn btn-secondary btn-xs mb1 bg-olive btn-xs" disabled style="border-radius:7px;"> <i class="fa fa-history"></i> never expire</a>';
                }
                // else{
                // $html .= '<a href="/users/single/'.$row->id.'" class="btn btn-success btn-xs mb1 bg-olive btn-xs" disabled style="border-radius:7px;"><i class="fa fa-recycle"></i> Recharge</a>';
                // }
                return $html;
            })->setRowAttr([
				'style' => function($row){
					return $row->profile == 'DISABLED' ? 'background-color: #e3c6c6 !important;' : '';
				}
			])
            ->addColumn("fullname", function ($row) {
                return $row->firstname . " " . $row->lastname;
            })
            ->addColumn("usernames", function ($row) {
                return $row->username . "@logon";
            })
            ->addColumn("subdealerid", function ($row) {
                if ($row->sub_dealer_id) {
                    return $row->sub_dealer_id;
                } else {
                    return "My Users";
                }
            })
            ->editColumn("action_delete", function ($row) {
                $csrf = csrf_token();
                if (@$row->cnic != "" || @$row->cnic != null) {
                    $html =
                        '<a href="#" class="btn btn-success btn-xs" style="margin:5px;border-radius:7px;" disabled><i class="fa fa-check"></i> CNIC</a>';
                } else {
                    // $html = "<a href='#' onclick=nicVerify('".$row->username."') class='btn btn-danger btn-xs' style='margin:5px;border-radius:7px;'><i class='fa fa-close'></i>CNIC</a>";
                    $html =
                        ' <form action="/users/nicVerify" method="POST" style="display:inline">
		<input type="hidden" name="_token" value="' .
                        $csrf .
                        '">
		<input type="hidden" name="username" id="username" value="' .
                        $row->username .
                        '">
		<button type="submit"  class="btn btn-danger btn-xs" style="margin:5px;border-radius:7px;"><i class="fa fa-close"></i> CNIC</button>
	  </form>';
                }
                if (@$row->mobile_status != 0 || @$row->mobile_status != null) {
                    $html .=
                        '<a href="#" class="btn btn-info btn-xs" style="border-radius:7px;" disabled><i class="fa fa-check"></i> Mobile</a>';
                } else {
                    $html .=
                        '<form action="/users/smsverify" method="POST" style="display:inline">
		<input type="hidden" name="_token" value="' .
                        $csrf .
                        '">
		<input type="hidden" name="username" id="username" value="' .
                        $row->username .
                        '">
		<button type="submit"  class="btn btn-danger btn-xs" style="margin:5px;border-radius:7px;"><i class="fa fa-close"></i> MOBILE</button>
	  </form>';
                    // $html .= '<a href="#" class="btn btn-danger btn-xs" style="border-radius:7px;"><i class="fa fa-close"></i>Mobile</a>';
                }
                return $html;
            })
            ->rawColumns([
                "action_delete" => "action_delete",
                "action" => "action",
            ])
            ->addIndexColumn()
            ->make(true);
    }
    public function expireServerSideUser(Request $request)
    {
        $dealerid = Auth::user()->dealerid;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $status = Auth::user()->status;

        $dealerid = Auth::user()->dealerid;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $trader_id = Auth::user()->trader_id;
        $status = Auth::user()->status;

        $date = date("Y-m-d");
        //
        if ($status == "dealer") {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.dealerid", "=", $dealerid)
                ->where("user_info.status", "=", "user")
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        ">=",
                        date("Y-m-d", strtotime("-7 day")),
                    ],
                ])
                ->where(
                    "user_status_info.expire_datetime",
                    "<=",
                    date("Y-m-d H:i:s")
                )
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
            // dd(date('Y-m-d H:i:s'));
        } elseif ($status == "subdealer") {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.status", "=", "user")
                ->where("user_info.sub_dealer_id", "=", $sub_dealer_id)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        ">=",
                        date("Y-m-d", strtotime("-7 day")),
                    ],
                ])
                ->where(
                    "user_status_info.expire_datetime",
                    "<=",
                    date("Y-m-d H:i:s")
                )
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
        } elseif ($status == "trader") {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.status", "=", "user")
                ->where("user_info.trader_id", "=", $trader_id)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        ">=",
                        date("Y-m-d", strtotime("-7 day")),
                    ],
                ])
                ->where(
                    "user_status_info.expire_datetime",
                    "<=",
                    date("Y-m-d H:i:s")
                )
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
        } elseif ($status == "inhouse" && $sub_dealer_id != "") {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.status", "=", "user")
                ->where("user_info.sub_dealer_id", "=", $sub_dealer_id)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        ">=",
                        date("Y-m-d", strtotime("-7 day")),
                    ],
                ])
                ->where(
                    "user_status_info.expire_datetime",
                    "<=",
                    date("Y-m-d H:i:s")
                )
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
        } elseif ($status == "inhouse" && $dealerid == Auth::user()->dealerid) {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.status", "=", "user")
                ->where("user_info.dealerid", "=", $dealerid)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        ">=",
                        date("Y-m-d", strtotime("-7 day ")),
                    ],
                ])
                ->where(
                    "user_status_info.expire_datetime",
                    "<=",
                    date("Y-m-d H:i:s")
                )
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
        }
        $sno = 1;
        $pro_groupname = "";
        $allData = [];
        foreach ($allusers as $data) {
            $allData[] = $data;
            // dd($allData);
        }

        return Datatables::of($allData)
            ->addColumn("action", function ($row) {
                $html =
                    '<a href="/users/user/user?id=' .
                    $row->id .
                    '" class="btn btn-info btn-xs" style="border-radius:7px;"><i class="fa fa-user"></i>View</a> ';
                $html .=
                    '<a href="/users/users/user/' .
                    $row->id .
                    '" class="btn btn-primary mb1 bg-olive btn-xs" style="border-radius:7px;"><i class="fa fa-edit"></i>Edit</a>';
                if ($row->profile == "DISABLED") {
                    $html .=
                        '<a href="#" class="btn btn-danger btn-xs disabled mb1 bg-olive btn-xs" style="border-radius:7px;"><i class="fa fa-ban"></i> DISABLED</a>';
                } else {
                    $html .=
                        '<a href="/users/single/' .
                        $row->id .
                        '" class="btn btn-success btn-xs mb1 bg-olive btn-xs" style="border-radius:7px;"><i class="fa fa-recycle"></i>Recharge</a>';
                }
                return $html;
            })
            ->addColumn("fullname", function ($row) {
                return $row->firstname . " " . $row->lastname;
            })
            ->editColumn("action_delete", function ($row) {
                $csrf = csrf_token();
                if (@$row->cnic != "" || @$row->cnic != null) {
                    $html =
                        '<a href="#" class="btn btn-success btn-xs" style="margin:5px;border-radius:7px;" disabled><i class="fa fa-check"></i>CNIC</a>';
                } else {
                    // $html = "<a href='#' onclick=nicVerify('".$row->username."') class='btn btn-danger btn-xs' style='margin:5px;border-radius:7px;'><i class='fa fa-close'></i>CNIC</a>";
                    $html =
                        ' <form action="/users/nicVerify" method="POST" style="display:inline">
		<input type="hidden" name="_token" value="' .
                        $csrf .
                        '">
		<input type="hidden" name="username" id="username" value="' .
                        $row->username .
                        '">
		<button type="submit"  class="btn btn-danger btn-xs" style="margin:5px;border-radius:7px;"><i class="fa fa-close"></i>CNIC</button>
	  </form>';
                }
                if (@$row->mobile_status != 0 || @$row->mobile_status != null) {
                    $html .=
                        '<a href="#" class="btn btn-info btn-xs" style="border-radius:7px;" disabled><i class="fa fa-check"></i>Mobile</a>';
                } else {
                    $html .=
                        '<form action="/users/smsverify" method="POST" style="display:inline">
		<input type="hidden" name="_token" value="' .
                        $csrf .
                        '">
		<input type="hidden" name="username" id="username" value="' .
                        $row->username .
                        '">
		<button type="submit"  class="btn btn-danger btn-xs" style="margin:5px;border-radius:7px;"><i class="fa fa-close"></i>MOBILE</button>
	  </form>';
                    // $html .= '<a href="#" class="btn btn-danger btn-xs" style="border-radius:7px;"><i class="fa fa-close"></i>Mobile</a>';
                }
                return $html;
            })
            ->rawColumns([
                "action_delete" => "action_delete",
                "action" => "action",
            ])
            ->addIndexColumn()
            ->make(true);
    }
    public function terminateServerSideUser(Request $request)
    {
        // -----------------------------------------------------------------------------
        $dealerid = Auth::user()->dealerid;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $status = Auth::user()->status;
        $dealerid = Auth::user()->dealerid;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $trader_id = Auth::user()->trader_id;
        $status = Auth::user()->status;
        $date = date("Y-m-d");
        if ($status == "dealer") {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.dealerid", "=", $dealerid)
                ->where("user_info.status", "=", "user")
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        "<",
                        date("Y-m-d", strtotime("-7 day")),
                    ],
                    ["user_status_info.card_expire_on", "!=", "1990-01-01"],
                ])
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
        } elseif ($status == "subdealer") {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.status", "=", "user")
                ->where("user_info.sub_dealer_id", "=", $sub_dealer_id)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        "<",
                        date("Y-m-d", strtotime("-7 day")),
                    ],
                    ["user_status_info.card_expire_on", "!=", "1990-01-01"],
                ])
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
        } elseif ($status == "trader") {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.status", "=", "user")
                ->where("user_info.trader_id", "=", $trader_id)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        "<",
                        date("Y-m-d", strtotime("-7 day")),
                    ],
                    ["user_status_info.card_expire_on", "!=", "1990-01-01"],
                ])
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
        } elseif ($status == "inhouse" && $sub_dealer_id != "") {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.status", "=", "user")
                ->where("user_info.sub_dealer_id", "=", $sub_dealer_id)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        "<",
                        date("Y-m-d", strtotime("-7 day")),
                    ],
                    ["user_status_info.card_expire_on", "!=", "1990-01-01"],
                ])
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
        } elseif ($status == "inhouse" && $dealerid == Auth::user()->dealerid) {
            $allusers = UserInfo::Join("user_status_info", function ($join) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->leftJoin("user_verification", function ($join) {
                    $join->on(
                        "user_verification.username",
                        "=",
                        "user_info.username"
                    );
                })
                ->where("user_info.status", "=", "user")
                ->where("user_info.dealerid", "=", $dealerid)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        "<",
                        date("Y-m-d", strtotime("-7 day")),
                    ],
                    ["user_status_info.card_expire_on", "!=", "1990-01-01"],
                ])
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.name",
                    "user_info.sub_dealer_id",
                    "user_info.trader_id",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                    "user_verification.cnic",
                    "mobile_status",
                ]);
        }
        $sno = 1;
        $pro_groupname = "";
        $allData = [];
        foreach ($allusers as $data) {
            $allData[] = $data;
            // dd($allData);
        }

        return Datatables::of($allData)
            ->addColumn("action", function ($row) {
                $html =
                    '<a href="/users/user/user?id=' .
                    $row->id .
                    '" class="btn btn-info btn-xs" style="border-radius:7px;"><i class="fa fa-user"></i>View</a> ';
                $html .=
                    '<a href="/users/users/user/' .
                    $row->id .
                    '" class="btn btn-primary mb1 bg-olive btn-xs" style="border-radius:7px;"><i class="fa fa-edit"></i>Edit</a>';
                if ($row->profile == "DISABLED") {
                    $html .=
                        '<a href="#" class="btn btn-danger btn-xs disabled mb1 bg-olive btn-xs" style="border-radius:7px;"><i class="fa fa-ban"></i> DISABLED</a>';
                } else {
                    $html .=
                        '<a href="/users/single/' .
                        $row->id .
                        '" class="btn btn-success btn-xs mb1 bg-olive btn-xs" style="border-radius:7px;"><i class="fa fa-recycle"></i>Recharge</a>';
                }
                return $html;
            })
            ->addColumn("fullname", function ($row) {
                return $row->firstname . " " . $row->lastname;
            })
            ->editColumn("action_delete", function ($row) {
                $csrf = csrf_token();
                if (@$row->cnic != "" || @$row->cnic != null) {
                    $html =
                        '<a href="#" class="btn btn-success btn-xs" style="margin:5px;border-radius:7px;" disabled><i class="fa fa-check"></i>CNIC</a>';
                } else {
                    // $html = "<a href='#' onclick=nicVerify('".$row->username."') class='btn btn-danger btn-xs' style='margin:5px;border-radius:7px;'><i class='fa fa-close'></i>CNIC</a>";
                    $html =
                        ' <form action="/users/nicVerify" method="POST" style="display:inline">
		<input type="hidden" name="_token" value="' .
                        $csrf .
                        '">
		<input type="hidden" name="username" id="username" value="' .
                        $row->username .
                        '">
		<button type="submit"  class="btn btn-danger btn-xs" style="margin:5px;border-radius:7px;"><i class="fa fa-close"></i>CNIC</button>
	  </form>';
                }
                if (@$row->mobile_status != 0 || @$row->mobile_status != null) {
                    $html .=
                        '<a href="#" class="btn btn-info btn-xs" style="border-radius:7px;" disabled><i class="fa fa-check"></i>Mobile</a>';
                } else {
                    $html .=
                        '<form action="/users/smsverify" method="POST" style="display:inline">
		<input type="hidden" name="_token" value="' .
                        $csrf .
                        '">
		<input type="hidden" name="username" id="username" value="' .
                        $row->username .
                        '">
		<button type="submit"  class="btn btn-danger btn-xs" style="margin:5px;border-radius:7px;"><i class="fa fa-close"></i>MOBILE</button>
	  </form>';
                    // $html .= '<a href="#" class="btn btn-danger btn-xs" style="border-radius:7px;"><i class="fa fa-close"></i>Mobile</a>';
                }
                return $html;
            })
            ->rawColumns([
                "action_delete" => "action_delete",
                "action" => "action",
            ])
            ->addIndexColumn()
            ->make(true);
    }

    public function verifyUser($username)
    {
        $currentStatus = Auth::user()->status;
        if ($currentStatus == "dealer") {
            $userDealer = UserInfo::where([
                "dealerid" => Auth::user()->dealerid,
                "username" => $username,
            ])
                ->select(
                    "id",
                    "username",
                    "dealerid",
                    "nic",
                    "sub_dealer_id",
                    "resellerid",
                    "status"
                )
                ->first();
        } elseif ($currentStatus == "subdealer") {
            $userDealer = UserInfo::where([
                "sub_dealer_id" => Auth::user()->sub_dealer_id,
                "username" => $username,
            ])
                ->select(
                    "id",
                    "username",
                    "dealerid",
                    "nic",
                    "sub_dealer_id",
                    "resellerid",
                    "status"
                )
                ->first();
        } else {
            $userDealer = UserInfo::where([
                "trader_id" => Auth::user()->trader_id,
                "username" => $username,
            ])
                ->select(
                    "id",
                    "username",
                    "dealerid",
                    "nic",
                    "sub_dealer_id",
                    "resellerid",
                    "status",
                    "trader_id"
                )
                ->first();
        }
        return view("users.dealer.Aslamview_users", [
            "userDealer" => $userDealer,
        ]);
    }

    public function verifySms($username)
    {
        $currentStatus = Auth::user()->status;
        if ($currentStatus == "dealer") {
            $userDealer = UserInfo::where([
                "dealerid" => Auth::user()->dealerid,
                "username" => $username,
            ])
                ->select("id", "username", "dealerid", "mobilephone", "status")
                ->first();
        } else {
            $userDealer = UserInfo::where([
                "sub_dealer_id" => Auth::user()->sub_dealer_id,
                "username" => $username,
            ])
                ->select(
                    "id",
                    "username",
                    "sub_dealer_id",
                    "mobilephone",
                    "status"
                )
                ->first();
        }
        return view("users.dealer.smsView", [
            "userDealer" => $userDealer,
        ]);
    }

    //Aslam Work
    public function epiredUser($status)
    {
        $dealerid = Auth::user()->dealerid;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $status = Auth::user()->status;

        $date = date("Y-m-d");
        //
        if ($status == "dealer") {
            $allusers = UserInfo::leftJoin("user_status_info", function (
                $join
            ) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->where("user_info.dealerid", "=", $dealerid)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        "<",
                        date("Y-m-d", strtotime($date . " -1 months")),
                    ],
                    ["user_status_info.card_expire_on", "!=", "1990-01-01"],
                ])
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                ]);
        } else {
            $allusers = UserInfo::leftJoin("user_status_info", function (
                $join
            ) {
                $join->on(
                    "user_status_info.username",
                    "=",
                    "user_info.username"
                );
            })
                ->where("user_info.sub_dealer_id", "=", $sub_dealer_id)
                ->where([
                    [
                        "user_status_info.card_expire_on",
                        "<",
                        date("Y-m-d", strtotime($date . " -1 months")),
                    ],
                    ["user_status_info.card_expire_on", "!=", "1990-01-01"],
                ])
                ->get([
                    "user_info.dealerid",
                    "user_info.username",
                    "user_info.profile",
                    "user_info.firstname",
                    "user_info.lastname",
                    "user_info.address",
                    "user_info.id",
                    "user_status_info.card_expire_on",
                ]);
        }

        return view("users.billing.expired_user", [
            "allusers" => $allusers,
        ]);
    }
    public function onlineUsers($status)
    {
        $arr = [];
        $dealerid = Auth::user()->dealerid;
        $currentStatus = Auth::user()->status;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        if ($currentStatus == "dealer") {
            $userDealer = UserInfo::where(["dealerid" => $dealerid])
                ->select("username", "dealerid")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        } elseif ($currentStatus == "subdealer") {
            $userDealer = UserInfo::where([
                "sub_dealer_id" => Auth::user()->sub_dealer_id,
                "status" => "user",
            ])
                ->select("username", "sub_dealer_id")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        } elseif ($currentStatus == "trader") {
            $userDealer = UserInfo::where([
                "trader_id" => Auth::user()->trader_id,
                "status" => "user",
            ])
                ->select("username", "sub_dealer_id")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        } elseif (
            $currentStatus == "inhouse" &&
            Auth::user()->sub_dealer_id == ""
        ) {
            $userDealer = UserInfo::where([
                "dealerid" => $dealerid,
                "status" => "user",
            ])
                ->select("username", "dealerid")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        } elseif (
            $currentStatus == "inhouse" &&
            Auth::user()->sub_dealer_id != ""
        ) {
            $userDealer = UserInfo::where([
                "sub_dealer_id" => Auth::user()->sub_dealer_id,
                "status" => "user",
            ])
                ->select("username", "sub_dealer_id")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        }
        foreach ($userDealer as $value) {
            $dealerids = $value->dealerid;
            $online = RadAcct::where([
                "acctstoptime" => null,
                "username" => $value->username,
            ])->get();
            foreach ($online as $value) {
                $arr[] = $value;
            }
        }
        $num = count($arr);
        return view("users.dealer.online_user", [
            "arr" => $arr,
            "dealerids" => $dealerids,
            "dhcp_server" => $dhcp_server,
            "nn" => $num,
        ]);
    }
    // Offline
    public function offlineUserView()
    {
        $arr = [];
        $dealerid = Auth::user()->dealerid;
        $currentStatus = Auth::user()->status;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        if ($currentStatus == "dealer") {
            $userDealer = UserInfo::join(
                "user_status_info",
                "user_status_info.username",
                "user_info.username"
            )
                ->where("user_status_info.card_expire_on", ">", date("Y-m-d"))
                ->where(["dealerid" => $dealerid, "status" => "user"])
                ->select("user_info.username", "dealerid")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        } elseif ($currentStatus == "subdealer") {
            $userDealer = UserInfo::join(
                "user_status_info",
                "user_status_info.username",
                "user_info.username"
            )
                ->where("user_status_info.card_expire_on", ">", date("Y-m-d"))
                ->where([
                    "sub_dealer_id" => Auth::user()->sub_dealer_id,
                    "status" => "user",
                ])
                ->select("user_info.username", "sub_dealer_id")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        } elseif ($currentStatus == "trader") {
            $userDealer = UserInfo::join(
                "user_status_info",
                "user_status_info.username",
                "user_info.username"
            )
                ->where("user_status_info.card_expire_on", ">", date("Y-m-d"))
                ->where([
                    "trader_id" => Auth::user()->trader_id,
                    "status" => "user",
                ])
                ->select("user_info.username", "sub_dealer_id")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        } elseif (
            $currentStatus == "inhouse" &&
            Auth::user()->sub_dealer_id == ""
        ) {
            $userDealer = UserInfo::join(
                "user_status_info",
                "user_status_info.username",
                "user_info.username"
            )
                ->where("user_status_info.card_expire_on", ">", date("Y-m-d"))
                ->where(["dealerid" => $dealerid, "status" => "user"])
                ->select("user_info.username", "dealerid")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        } elseif (
            $currentStatus == "inhouse" &&
            Auth::user()->sub_dealer_id != ""
        ) {
            $userDealer = UserInfo::join(
                "user_status_info",
                "user_status_info.username",
                "user_info.username"
            )
                ->where("user_status_info.card_expire_on", ">", date("Y-m-d"))
                ->where([
                    "sub_dealer_id" => Auth::user()->sub_dealer_id,
                    "status" => "user",
                ])
                ->select("user_info.username", "sub_dealer_id")
                ->get();
            $dhcp_server = Dhcp_dealer_server::where([
                "dealerid" => $dealerid,
            ])->first();
        }
        foreach ($userDealer as $value) {
            $dealerids = $value->dealerid;
            $offline = RadAcct::where("username", $value->username)
                ->orderby("radacct.radacctid", "DESC")
                ->first();

            // dd($offline);
            if (@$offline->acctstoptime == null) {
            } else {
                $arr[] = $offline;
            }
        }
        return view("users.dealer.offline_user", [
            "arr" => $arr,
            "dealerids" => $dealerids,
            "dhcp_server" => $dhcp_server,
        ]);
    }
    // public function onlineUsers($status){
    // 	return view('users.dealer.online_user');
    // }
    public function onlinePost()
    {
        $arr = [];
        $dealerid = Auth::user()->dealerid;
        $currentStatus = Auth::user()->status;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $trader_id = Auth::user()->trader_id;
        if ($currentStatus == "dealer") {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join("radacct", "radacct.username", "radcheck.username")
                ->where([
                    "radcheck.dealerid" => $dealerid,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->where(["radacct.acctstoptime" => null])
                ->get([
                    "radacct.acctsessiontime",
                    "radacct.acctstarttime",
                    "radacct.framedipaddress",
                    "radacct.acctoutputoctets",
                    "radacct.acctinputoctets",
                    "radacct.username",
                    "radacct.callingstationid",
                ]);
        } elseif ($currentStatus == "subdealer") {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join("radacct", "radacct.username", "radcheck.username")
                ->where([
                    "radcheck.sub_dealer_id" => $sub_dealer_id,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->where(["radacct.acctstoptime" => null])
                ->get([
                    "radacct.acctsessiontime",
                    "radacct.acctstarttime",
                    "radacct.framedipaddress",
                    "radacct.acctoutputoctets",
                    "radacct.acctinputoctets",
                    "radacct.username",
                    "radacct.callingstationid",
                ]);
            // $dhcp_server = Dhcp_dealer_server::where(['dealerid' => $dealerid])->first();
        } elseif ($currentStatus == "trader") {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join("radacct", "radacct.username", "radcheck.username")
                ->where([
                    "radcheck.trader_id" => $trader_id,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->where(["radacct.acctstoptime" => null])
                ->get([
                    "radacct.acctsessiontime",
                    "radacct.acctstarttime",
                    "radacct.framedipaddress",
                    "radacct.acctoutputoctets",
                    "radacct.acctinputoctets",
                    "radacct.username",
                    "radacct.callingstationid",
                ]);
            // $dhcp_server = Dhcp_dealer_server::where(['dealerid' => $dealerid])->first();
        } elseif (
            $currentStatus == "inhouse" &&
            Auth::user()->sub_dealer_id == ""
        ) {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join("radacct", "radacct.username", "radcheck.username")
                ->where([
                    "radcheck.dealerid" => $dealerid,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->where(["radacct.acctstoptime" => null])
                ->get([
                    "radacct.acctsessiontime",
                    "radacct.acctstarttime",
                    "radacct.framedipaddress",
                    "radacct.acctoutputoctets",
                    "radacct.acctinputoctets",
                    "radacct.username",
                    "radacct.callingstationid",
                ]);
            // $dhcp_server = Dhcp_dealer_server::where(['dealerid' => $dealerid])->first();
        } elseif (
            $currentStatus == "inhouse" &&
            Auth::user()->sub_dealer_id != ""
        ) {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join("radacct", "radacct.username", "radcheck.username")
                ->where([
                    "radcheck.sub_dealer_id" => $sub_dealer_id,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->where(["radacct.acctstoptime" => null])
                ->get([
                    "radacct.acctsessiontime",
                    "radacct.acctstarttime",
                    "radacct.framedipaddress",
                    "radacct.acctoutputoctets",
                    "radacct.acctinputoctets",
                    "radacct.username",
                    "radacct.callingstationid",
                ]);
            // $dhcp_server = Dhcp_dealer_server::where(['dealerid' => $dealerid])->first();
        }

        return Datatables::of($userDealer)
            ->addColumn("sessionTime", function ($row) {
                $seconds = $row->acctsessiontime;
                $dtF = new DateTime("@0");
                $dtT = new DateTime("@$seconds");
                $onlineTime = $dtF
                    ->diff($dtT)
                    ->format("%aDays : %hHrs : %i Mins %s Secs");
                $datetime1 = new DateTime($row->acctstarttime);
                $datetime2 = new DateTime("now");
                $interval = $datetime1->diff($datetime2);
                $Day = $interval->format("%dD");
                if ($Day > 0) {
                    $html = $interval->format("%dDays : %hHrs : %iMins");
                } else {
                    $html = $interval->format("%hHrs : %iMins : %sSecs");
                }
                return $html;
            })
            ->addColumn("dwUP", function ($row) {
                $size = $row->acctoutputoctets / 1024;
                if ($size < 1024) {
                    $size = number_format($size, 2);
                    $size .= " KB";
                } else {
                    if ($size / 1024 < 1024) {
                        $size = number_format($size / 1024, 2);
                        $size .= " MB";
                    } elseif ($size / 1024 / 1024 < 1024) {
                        $size = number_format($size / 1024 / 1024, 2);
                        $size .= " GB";
                    } elseif ($size / 1024 / 1024 / 1024 < 1024) {
                        $size = number_format($size / 1024 / 1024 / 1024, 2);
                        $size .= " TB";
                    } elseif ($size / 1024 / 1024 / 1024 / 1024 < 1024) {
                        $size = number_format(
                            $size / 1024 / 1024 / 1024 / 1024,
                            2
                        );
                        $size .= " PB";
                    }
                }
                $upload = preg_replace("/.00/", "", $size);

                $size = $row->acctinputoctets / 1024;
                if ($size < 1024) {
                    $size = number_format($size, 2);
                    $size .= " KB";
                } else {
                    if ($size / 1024 < 1024) {
                        $size = number_format($size / 1024, 2);
                        $size .= " MB";
                    } elseif ($size / 1024 / 1024 < 1024) {
                        $size = number_format($size / 1024 / 1024, 2);
                        $size .= " GB";
                    } elseif ($size / 1024 / 1024 / 1024 < 1024) {
                        $size = number_format($size / 1024 / 1024 / 1024, 2);
                        $size .= " TB";
                    } elseif ($size / 1024 / 1024 / 1024 / 1024 < 1024) {
                        $size = number_format(
                            $size / 1024 / 1024 / 1024 / 1024,
                            2
                        );
                        $size .= " PB";
                    }
                }
                $down = preg_replace("/.00/", "", $size);

                $html = $upload . "/" . $down;
                return $html;
            })
            ->addColumn("action", function ($row) {
                $html =
                    '<button onclick="onlineUserDetail(' .
                    "'$row->callingstationid'" .
                    "," .
                    "'$row->username'" .
                    ')" data-toggle="modal" class="btn btn-info btn-xs" style="border-radius:7px;"><i class="fa fa-user"></i> View Details </button> ';
                return $html;
            })
            ->addIndexColumn()
            ->make(true);
    }
    public function onlineUserDetails(Request $request)
    {
        $mac = $request->mac;
        $username = $request->username;
        $dealerid = Auth::user()->dealerid;
        $details = UserInfo::where("username", $username)
            ->select(
                "username",
                "firstname",
                "lastname",
                "dealerid",
                "address",
                "sub_dealer_id"
            )
            ->first();

        $mac = $request->mac;
        $url='http://cron.lbi.net.pk/mikrotik_api/api.php?mac='.$mac.'&dealerid='.$dealerid;
        $url =
            "http://cron.lbi.net.pk/logoncp_cron/dhcp_api/api.php?mac=" .
            $mac .
            "&dealerid=" .
            $dealerid;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "$url");
        //
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        $result = curl_exec($ch);

        // return $result;

        return response()->json([
            "result" => $result,
            "details" => $details,
        ]);
    }

    // public function offlineUserView(){
    // 	return view('users.dealer.offline_user');
    // }
    public function offlinePost()
    {
        $arr = [];
        $dealerid = Auth::user()->dealerid;
        $currentStatus = Auth::user()->status;
        $sub_dealer_id = Auth::user()->sub_dealer_id;
        $trader_id = Auth::user()->trader_id;
        $data = [];
        if ($currentStatus == "dealer") {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join(
                    "radusergroup",
                    "radcheck.username",
                    "radusergroup.username"
                )
                ->whereNotIn("radusergroup.groupname", [
                    "EXPIRED",
                    "TERMINATE",
                    "NEW",
                    "DISABLED",
                ])
                ->where([
                    "radcheck.dealerid" => $dealerid,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->get(["radcheck.username"]);

            foreach ($userDealer as $key => $value) {
                $query = DB::connection("mysql1")
                    ->table("radacct")
                    ->where("username", $value->username)
                    ->orderby("radacct.radacctid", "DESC")
                    ->first([
                        "radacct.acctsessiontime",
                        "radacct.acctstarttime",
                        "radacct.framedipaddress",
                        "radacct.acctoutputoctets",
                        "radacct.acctinputoctets",
                        "radacct.username",
                        "radacct.callingstationid",
                        "radacct.acctstoptime",
                    ]);
                if (@$query->acctstoptime == null) {
                } else {
                    array_push($data, $query);
                }
            }
            // dd($data);
        } elseif ($currentStatus == "subdealer") {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join(
                    "radusergroup",
                    "radcheck.username",
                    "radusergroup.username"
                )
                ->whereNotIn("radusergroup.groupname", [
                    "EXPIRED",
                    "TERMINATE",
                    "NEW",
                    "DISABLED",
                ])
                ->where([
                    "radcheck.sub_dealer_id" => $sub_dealer_id,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->get(["radcheck.username"]);

            foreach ($userDealer as $key => $value) {
                $query = DB::connection("mysql1")
                    ->table("radacct")
                    ->where("username", $value->username)
                    ->orderby("radacct.radacctid", "DESC")
                    ->first([
                        "radacct.acctsessiontime",
                        "radacct.acctstarttime",
                        "radacct.framedipaddress",
                        "radacct.acctoutputoctets",
                        "radacct.acctinputoctets",
                        "radacct.username",
                        "radacct.callingstationid",
                        "radacct.acctstoptime",
                    ]);
                if (@$query->acctstoptime == null) {
                } else {
                    array_push($data, $query);
                }
            }
        } elseif ($currentStatus == "trader") {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join(
                    "radusergroup",
                    "radcheck.username",
                    "radusergroup.username"
                )
                ->whereNotIn("radusergroup.groupname", [
                    "EXPIRED",
                    "TERMINATE",
                    "NEW",
                    "DISABLED",
                ])
                ->where([
                    "radcheck.trader_id" => $trader_id,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->get(["radcheck.username"]);

            foreach ($userDealer as $key => $value) {
                $query = DB::connection("mysql1")
                    ->table("radacct")
                    ->where("username", $value->username)
                    ->orderby("radacct.radacctid", "DESC")
                    ->first([
                        "radacct.acctsessiontime",
                        "radacct.acctstarttime",
                        "radacct.framedipaddress",
                        "radacct.acctoutputoctets",
                        "radacct.acctinputoctets",
                        "radacct.username",
                        "radacct.callingstationid",
                        "radacct.acctstoptime",
                    ]);
                if (@$query->acctstoptime == null) {
                } else {
                    array_push($data, $query);
                }
            }
        } elseif (
            $currentStatus == "inhouse" &&
            Auth::user()->sub_dealer_id == null
        ) {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join(
                    "radusergroup",
                    "radcheck.username",
                    "radusergroup.username"
                )
                ->whereNotIn("radusergroup.groupname", [
                    "EXPIRED",
                    "TERMINATE",
                    "NEW",
                    "DISABLED",
                ])
                ->where([
                    "radcheck.dealerid" => $dealerid,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->get(["radcheck.username"]);

            foreach ($userDealer as $key => $value) {
                $query = DB::connection("mysql1")
                    ->table("radacct")
                    ->where("username", $value->username)
                    ->orderby("radacct.radacctid", "DESC")
                    ->first([
                        "radacct.acctsessiontime",
                        "radacct.acctstarttime",
                        "radacct.framedipaddress",
                        "radacct.acctoutputoctets",
                        "radacct.acctinputoctets",
                        "radacct.username",
                        "radacct.callingstationid",
                        "radacct.acctstoptime",
                    ]);
                if (@$query->acctstoptime == null) {
                } else {
                    array_push($data, $query);
                }
            }
        } elseif (
            $currentStatus == "inhouse" &&
            Auth::user()->sub_dealer_id != ""
        ) {
            $userDealer = DB::connection("mysql1")
                ->table("radcheck")
                ->join(
                    "radusergroup",
                    "radcheck.username",
                    "radusergroup.username"
                )
                ->whereNotIn("radusergroup.groupname", [
                    "EXPIRED",
                    "TERMINATE",
                    "NEW",
                    "DISABLED",
                ])
                ->where([
                    "radcheck.sub_dealer_id" => $sub_dealer_id,
                    "radcheck.status" => "user",
                    "radcheck.attribute" => "Cleartext-Password",
                ])
                ->get(["radcheck.username"]);

            foreach ($userDealer as $key => $value) {
                $query = DB::connection("mysql1")
                    ->table("radacct")
                    ->where("username", $value->username)
                    ->orderby("radacct.radacctid", "DESC")
                    ->first([
                        "radacct.acctsessiontime",
                        "radacct.acctstarttime",
                        "radacct.framedipaddress",
                        "radacct.acctoutputoctets",
                        "radacct.acctinputoctets",
                        "radacct.username",
                        "radacct.callingstationid",
                        "radacct.acctstoptime",
                    ]);
                if (@$query->acctstoptime == null) {
                } else {
                    array_push($data, $query);
                }
            }
        }

        return Datatables::of($data)
            ->addColumn("sessionTime", function ($row) {
                $seconds = $row->acctsessiontime;
                $dtF = new DateTime("@0");
                $dtT = new DateTime("@$seconds");
                $onlineTime = $dtF
                    ->diff($dtT)
                    ->format("%aDays : %hHrs : %i Mins %s Secs");
                $datetime1 = new DateTime($row->acctstarttime);
                $datetime2 = new DateTime("now");
                $interval = $datetime1->diff($datetime2);
                $Day = $interval->format("%dD");
                if ($Day > 0) {
                    $html = $interval->format("%dDays : %hHrs : %iMins");
                } else {
                    $html = $interval->format("%hHrs : %iMins : %sSecs");
                }
                return $html;
            })
            ->addColumn("dwUP", function ($row) {
                $size = $row->acctoutputoctets / 1024;
                if ($size < 1024) {
                    $size = number_format($size, 2);
                    $size .= " KB";
                } else {
                    if ($size / 1024 < 1024) {
                        $size = number_format($size / 1024, 2);
                        $size .= " MB";
                    } elseif ($size / 1024 / 1024 < 1024) {
                        $size = number_format($size / 1024 / 1024, 2);
                        $size .= " GB";
                    } elseif ($size / 1024 / 1024 / 1024 < 1024) {
                        $size = number_format($size / 1024 / 1024 / 1024, 2);
                        $size .= " TB";
                    } elseif ($size / 1024 / 1024 / 1024 / 1024 < 1024) {
                        $size = number_format(
                            $size / 1024 / 1024 / 1024 / 1024,
                            2
                        );
                        $size .= " PB";
                    }
                }
                $upload = preg_replace("/.00/", "", $size);

                $size = $row->acctinputoctets / 1024;
                if ($size < 1024) {
                    $size = number_format($size, 2);
                    $size .= " KB";
                } else {
                    if ($size / 1024 < 1024) {
                        $size = number_format($size / 1024, 2);
                        $size .= " MB";
                    } elseif ($size / 1024 / 1024 < 1024) {
                        $size = number_format($size / 1024 / 1024, 2);
                        $size .= " GB";
                    } elseif ($size / 1024 / 1024 / 1024 < 1024) {
                        $size = number_format($size / 1024 / 1024 / 1024, 2);
                        $size .= " TB";
                    } elseif ($size / 1024 / 1024 / 1024 / 1024 < 1024) {
                        $size = number_format(
                            $size / 1024 / 1024 / 1024 / 1024,
                            2
                        );
                        $size .= " PB";
                    }
                }
                $down = preg_replace("/.00/", "", $size);

                $html = $upload . "/" . $down;
                return $html;
            })
            ->addColumn("action", function ($row) {
                $html =
                    '<button onclick="onlineUserDetail(' .
                    "'$row->callingstationid'" .
                    "," .
                    "'$row->username'" .
                    ')" data-toggle="modal" class="btn btn-info btn-xs" style="border-radius:7px;"><i class="fa fa-user"></i> View Details </button> ';
                return $html;
            })
            ->addIndexColumn()
            ->make(true);
    }
    public function offlineUserDetails(Request $request)
    {
        $mac = $request->mac;
        $username = $request->username;
        $dealerid = Auth::user()->dealerid;
        $details = UserInfo::where("username", $username)
            ->select(
                "username",
                "firstname",
                "lastname",
                "dealerid",
                "address",
                "sub_dealer_id"
            )
            ->first();

        $mac = $request->mac;
        $url='http://cron.lbi.net.pk/mikrotik_api/api.php?mac='.$mac.'&dealerid='.$dealerid;
        $url =
            "http://cron.lbi.net.pk/logoncp_cron/dhcp_api/api.php?mac=" .
            $mac .
            "&dealerid=" .
            $dealerid;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "$url");
        //
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        $result = curl_exec($ch);

        // return $result;

        return response()->json([
            "result" => $result,
            "details" => $details,
        ]);
    }

    public function ByteSize($bytes)
    {
        $size = $bytes / 1024;
        if ($size < 1024) {
            $size = number_format($size, 2);
            $size .= " KB";
        } else {
            if ($size / 1024 < 1024) {
                $size = number_format($size / 1024, 2);
                $size .= " MB";
            } elseif ($size / 1024 / 1024 < 1024) {
                $size = number_format($size / 1024 / 1024, 2);
                $size .= " GB";
            } elseif ($size / 1024 / 1024 / 1024 < 1024) {
                $size = number_format($size / 1024 / 1024 / 1024, 2);
                $size .= " TB";
            } elseif ($size / 1024 / 1024 / 1024 / 1024 < 1024) {
                $size = number_format($size / 1024 / 1024 / 1024 / 1024, 2);
                $size .= " PB";
            }
        }
        $size = preg_replace("/.00/", "", $size);
        return $size;
    }

    public function store(Request $request, $status)
    {

        

        switch ($status) {
            case "reseller":

            //partner themes 30 Jan 2023 anwaar

            $user_theme = new PartnerThemesUser();
            $user_theme->username = $request->get("resellerid");
            $user_theme->color = $request->get("theme_color");
            $user_theme->login_alignment = $request->get("login_alignment");
            $user_theme->save();

                 //dd($status);
                 //$active = 0;
                //$active = 1;  //26 Jan 2023
                // validation
                $this->validate($request, [
                    "username" => "required|unique:user_info",
                    "manager_id" => "required",
                    "resellerid" => "required|unique:user_info",
                    "password" => "required|confirmed",
                ]);
                if($request->hasFile('logo')){
                    $logo = $request->file('logo');
                    $image_name = $logo->getClientOriginalName();
                    $logo->move(public_path('/Login/images'),$image_name);
                
                }
                if($request->hasFile('bgImage')){
                    $bgImage = $request->file('bgImage');
                    $image_name = $bgImage->getClientOriginalName();
                    $bgImage->move(public_path('/Login/images'),$image_name);
                
                }

                /* admin module start 27 Jan 2023 */

                /*

                $user = new UserInfo();

                $domain = new Domain();
                $domain->domainname = $request->domain;
                $domain->resellerid = $request->resellerid;
                $domain->package_name = $request->packageName;
                $domain->logo = $request->logo;
                $domain->slogan = $request->slogan;
                $domain->powerdBy = $request->powerby;
                $domain->main_heading = $request->mheading;
                $domain->bg_image = $request->bgImage;
                $domain->theme_color = '60deg,#'.$request->color1.',#'.$request->color2;
                $domain->save();
                $domainID = $domain->id;

                $user->username = $request->get("username");
                $user->domainID = $domainID;
                $user->manager_id = $request->get("manager_id");
                $user->resellerid = $request->get("resellerid");
                $user->password = Hash::make($request->get("password"));
                $user->dealerid = null;
                $user->sub_dealer_id = null;
                $user->trader_id = null;
                $user->profile = "BE-9216k";
                $user->name = "ghaznavi"; // by default profile

                $user->password = Hash::make($request->get('password')); 
                $user->dealerid = '';            
                $user->sub_dealer_id = '';
                $user->profile ='BE-4096k'; // by default profile
                $user->save();

                // default amount is zero;
                $userAmount = new UserAmount();
                $userAmount->username = $request->get('username');
                $userAmount->status = 'reseller';
                $userAmount->amount = 0;
                $userAmount->save();

                // saving in redCheck: entry - 1
                $RadCheck = new RadCheck();
                $RadCheck->username = $request->get('username');
                $RadCheck->attribute ='Cleartext-Password';
                $RadCheck->op =':=';
                $RadCheck->value = $request->get('password');
                $RadCheck->dealerid ='';
                $RadCheck->sub_dealer_id ='';
                $RadCheck->svlan ='';
                $RadCheck->save();
                ////

                // saving in redCheck: entry - 2
                $RadCheck = new RadCheck();
                $RadCheck->username = $request->get('username');
                $RadCheck->attribute ='Simultaneous-Use';
                $RadCheck->op =':=';
                $RadCheck->value = '1';
                $RadCheck->dealerid ='';
                $RadCheck->sub_dealer_id ='';
                $RadCheck->svlan ='';
                $RadCheck->save();
                ///
                  // saving in redCheck: entry - 3
                $RadCheck = new RadCheck();
                $RadCheck->username = $request->get('username');
                $RadCheck->attribute ='Calling-Station-Id';
                $RadCheck->op =':=';
                $RadCheck->value = 'NEW';
                $RadCheck->dealerid ='';
                $RadCheck->sub_dealer_id ='';
                $RadCheck->svlan ='';
                $RadCheck->save();
                ///
                  //assigned server

                $server = new AssignNasType();
                $server->dealerid = '';
                $server->resellerid = $request->get('resellerid'); 
                $server->manager_id = $request->get('manager_id');
                $server->sub_dealer_id = '';
                $server->nas_type = $request->get('nas_type');
                $server->save();
                ///////Getting IP from usualIP
                $userusualIPs = UserUsualIP::where(['status' => '0'])->first();
                $ip = $userusualIPs->ip;

                // inserting ip in radreply
                $radreply = new Radreply();
                $radreply->username = $request->get('username');
                $radreply->attribute ='Framed-IP-Address';
                $radreply->op ='=';
                $radreply->value = $ip;
                $radreply->dealerid ='';
                $radreply->resellerid = $request->get('resellerid'); 
                $radreply->sub_dealer_id ='';
                $radreply->save();

                // changing status to 1 of got ip in usualIP
                $userusualIPs->status='1';
                $userusualIPs->save();

                // inserting ip in radusergroup
                $radusergroup = new RaduserGroup();
                $radusergroup->username = $request->get('username');
                $radusergroup->groupname ='DISABLED';
                $radusergroup->priority = '0';
                $radusergroup->save();

                ////inserting into useripstatus

                $useripstatus = new UserIPStatus();
                $useripstatus->username = $request->get('username');
                $useripstatus->ip = $ip;
                $useripstatus->type = 'usual_ip';
                $useripstatus->save();
                */


                /* admin module end */


                /* original entries 27 jan 20223 */

                // Domain Table Entry
                $domain = new Domain();
                $domain->domainname = $request->domain;
                $domain->resellerid = $request->resellerid;
                $domain->package_name = $request->packageName;
                $domain->logo = $request->logo;
                $domain->slogan = $request->slogan;
                $domain->powerdBy = $request->powerby;
                $domain->main_heading = $request->mheading;
                $domain->bg_image = $request->bgImage;
                $domain->theme_color = '60deg,#'.$request->color1.',#'.$request->color2;
                $domain->save();
                $domainID = $domain->id;

                $user = new UserInfo();

                $user->active = 1;
                $user->username = $request->get("username");
                $user->domainID = $domainID;
                $user->manager_id = $request->get("manager_id");
                $user->resellerid = $request->get("resellerid");
                $user->password = Hash::make($request->get("password"));
                $user->dealerid = null;
                $user->sub_dealer_id = null;
                $user->trader_id = null;
                $user->profile = "BE-9216k";
                $user->name = "ghaznavi"; // by default profile
                // default amount is zero;
                $userAmount = new UserAmount();
                $userAmount->username = $request->get("username");
                $userAmount->status = "reseller";
                $userAmount->amount = 0;
                $userAmount->credit_limit = 0;

                //assigned server
                $nas_type1 = AssignNasType::where([
                    "manager_id" => Auth::user()->manager_id,
                ])->first();
                $assignas = $nas_type1->nas_type;
                $server = new AssignNasType();
                $server->dealerid = "";
                $server->resellerid = $request->get("resellerid");
                $server->manager_id = $request->get("manager_id");
                $server->sub_dealer_id = null;
                $server->trader_id = null;
                $server->nas_type = $assignas;
                $server->save();
                // saving in redCheck: entry - 1
                $RadCheck = new RadCheck();
                $RadCheck->username = $request->get("username");
                $RadCheck->attribute = "Cleartext-Password";
                $RadCheck->op = ":=";
                $RadCheck->value = $request->get("password");
                $RadCheck->resellerid = $request->get("resellerid");
                $RadCheck->manager_id = $request->get("manager_id");
                $RadCheck->status = "reseller";
                $RadCheck->dealerid = null;
                $RadCheck->sub_dealer_id = null;
                $RadCheck->trader_id = null;
                $RadCheck->svlan = null;

                ////
                // saving in redCheck: entry - 2
                $RadCheck2 = new RadCheck();
                $RadCheck2->username = $request->get("username");
                $RadCheck2->attribute = "Simultaneous-Use";
                $RadCheck2->op = ":=";
                $RadCheck2->value = "1";
                $RadCheck2->resellerid = $request->get("resellerid");
                $RadCheck2->manager_id = $request->get("manager_id");
                $RadCheck2->status = "reseller";
                $RadCheck2->dealerid = null;
                $RadCheck2->sub_dealer_id = null;
                $RadCheck2->trader_id = null;
                $RadCheck2->svlan = null;

                ///
                // saving in redCheck: entry - 3
                $RadCheck3 = new RadCheck();
                $RadCheck3->username = $request->get("username");
                $RadCheck3->attribute = "Calling-Station-Id";
                $RadCheck3->op = ":=";
                $RadCheck3->value = "NEW";
                $RadCheck3->resellerid = $request->get("resellerid");
                $RadCheck3->manager_id = $request->get("manager_id");
                $RadCheck3->status = "reseller";
                $RadCheck3->dealerid = null;
                $RadCheck3->sub_dealer_id = null;
                $RadCheck3->trader_id = null;
                $RadCheck3->svlan = null;

                ///

                ///////Getting IP from usualIP
                
                $userusualIPs = UserUsualIP::where(["status" => "0"])->first();

                $ip = $userusualIPs->ip; // 23 jan original

 
                
                $radreply = new Radreply();
                $radreply->username = $request->get("username");
                $radreply->attribute = "Framed-IP-Address";
                $radreply->op = "=";
                $radreply->value = $ip;
                $radreply->dealerid = null;
                $radreply->resellerid = $request->get("resellerid");
                $radreply->sub_dealer_id = null;
                $radreply->manager_id = $request->get("manager_id");
                $radreply->trader_id = null;

           
                if(!empty($userusualIPs->status)){ 
                     $userusualIPs->status = "1";
                }

                $radusergroup = new RaduserGroup();
                $radusergroup->username = $request->get("username");
                $radusergroup->groupname = "DISABLED";
                $radusergroup->name = "DISABLED";
                $radusergroup->priority = "0";


                $useripstatus = new UserIPStatus();
                $useripstatus->username = $request->get("username");
                $useripstatus->ip = $ip;
                $useripstatus->type = "usual_ip";

                DB::transaction(function () use (
                    $useripstatus,
                    $radusergroup,
                    $userusualIPs, 
                    $radreply,
                    $RadCheck,
                    $RadCheck2,
                    $RadCheck3,
                    $userAmount
                ) {
                    $radreply->save();
                    $useripstatus->save();
                    $radusergroup->save();
                    $userusualIPs->save();
                    $RadCheck->save();
                    $RadCheck2->save();
                    $RadCheck3->save();
                    $userAmount->save();
                  
                });
               
                break;
            case "dealer":
                $active = 0;
                // validation
                $this->validate($request, [
                    "username" => "required|unique:user_info",
                    "manager_id" => "required",
                    "resellerid" => "required",
                    "dealerid" => "required|unique:user_info",
                    "password" => "required|confirmed",
                ]);
                $user->username = $request->get("username");
                $user->manager_id = $request->get("manager_id");
                $user->resellerid = $request->get("resellerid");
                $user->dealerid = $request->get("dealerid");
                $user->password = Hash::make($request->get("password"));
                $user->sub_dealer_id = null;
                $user->trader_id = null;
                $user->profile = "BE-9216k";
                $user->name = "ghaznavi";
                // default amount is zero;
                $userAmount = new UserAmount();
                $userAmount->username = $request->get("username");
                $userAmount->status = "dealer";
                $userAmount->amount = 0;
                $userAmount->credit_limit = 0;

                //assigned server

                //assigned server

                $nas_type1 = AssignNasType::where([
                    "manager_id" => Auth::user()->manager_id,
                ])->first();

                $assignas = $nas_type1->nas_type;

                $server = new AssignNasType();
                $server->dealerid = $request->get("dealerid");
                $server->resellerid = $request->get("resellerid");
                $server->manager_id = $request->get("manager_id");
                $server->sub_dealer_id = null;
                $server->trader_id = null;
                $server->nas_type = $assignas;
                $server->save();
                // saving in redCheck: entry - 1

                // $RadCheck = new RadCheck();
                // $RadCheck->username = $request->get('username');
                // $RadCheck->attribute ='Cleartext-Password';
                // $RadCheck->op =':=';
                // $RadCheck->value = $request->get('password');
                // $RadCheck->dealerid = $request->get('dealerid');
                // $RadCheck->sub_dealer_id ='';
                // $RadCheck->trader_id = NULL;
                // $RadCheck->svlan = $request->get('dealerid');

                // 	////

                // 	// saving in redCheck: entry - 2
                // $RadCheck2 = new RadCheck();
                // $RadCheck2->username = $request->get('username');
                // $RadCheck2->attribute ='Simultaneous-Use';
                // $RadCheck2->op =':=';
                // $RadCheck2->value = '1';
                // $RadCheck2->dealerid = $request->get('dealerid');
                // $RadCheck2->sub_dealer_id ='';
                // $RadCheck2->trader_id = NULL;
                // $RadCheck2->svlan = $request->get('dealerid');

                // 	///

                // // saving in redCheck: entry - 3
                // $RadCheck3 = new RadCheck();
                // $RadCheck3->username = $request->get('username');
                // $RadCheck3->attribute ='Calling-Station-Id';
                // $RadCheck3->op =':=';
                // $RadCheck3->value = 'NEW';
                // $RadCheck3->dealerid = $request->get('dealerid');
                // $RadCheck3->sub_dealer_id ='';
                // $RadCheck3->trader_id = NULL;
                // $RadCheck3->svlan = $request->get('dealerid');

                // saving in redCheck: entry - 1
                $RadCheck = new RadCheck();
                $RadCheck->username = $request->get("username");
                $RadCheck->attribute = "Cleartext-Password";
                $RadCheck->op = ":=";
                $RadCheck->value = $request->get("password");
                $RadCheck->resellerid = $request->get("resellerid");
                $RadCheck->manager_id = $request->get("manager_id");
                $RadCheck->status = "dealer";
                $RadCheck->dealerid = $request->get("dealerid");
                $RadCheck->sub_dealer_id = null;
                $RadCheck->trader_id = null;
                $RadCheck->svlan = $request->get("dealerid");

                ////
                // saving in redCheck: entry - 2
                $RadCheck2 = new RadCheck();
                $RadCheck2->username = $request->get("username");
                $RadCheck2->attribute = "Simultaneous-Use";
                $RadCheck2->op = ":=";
                $RadCheck2->value = "1";
                $RadCheck2->resellerid = $request->get("resellerid");
                $RadCheck2->manager_id = $request->get("manager_id");
                $RadCheck2->status = "dealer";
                $RadCheck2->dealerid = $request->get("dealerid");
                $RadCheck2->sub_dealer_id = null;
                $RadCheck2->trader_id = null;
                $RadCheck2->svlan = $request->get("dealerid");

                ///
                // saving in redCheck: entry - 3
                $RadCheck3 = new RadCheck();
                $RadCheck3->username = $request->get("username");
                $RadCheck3->attribute = "Calling-Station-Id";
                $RadCheck3->op = ":=";
                $RadCheck3->value = "NEW";
                $RadCheck3->resellerid = $request->get("resellerid");
                $RadCheck3->manager_id = $request->get("manager_id");
                $RadCheck3->status = "dealer";
                $RadCheck3->dealerid = $request->get("dealerid");
                $RadCheck3->sub_dealer_id = null;
                $RadCheck3->trader_id = null;
                $RadCheck3->svlan = $request->get("dealerid");

                ///

                ///

                ///////Getting IP from usualIP
                $userusualIPs = UserUsualIP::where(["status" => "0"])->first();
                $ip = $userusualIPs->ip;

                // inserting ip in radreply
                $radreply = new Radreply();
                $radreply->username = $request->get("username");
                $radreply->attribute = "Framed-IP-Address";
                $radreply->op = "=";
                $radreply->value = $ip;
                $radreply->dealerid = $request->get("dealerid");
                $radreply->resellerid = $request->get("resellerid");
                $radreply->sub_dealer_id = null;
                $radreply->manager_id = $request->get("manager_id");
                $radreply->trader_id = null;

                // changing status to 1 of got ip in usualIP
                $userusualIPs->status = "1";

                // inserting ip in radusergroup
                $radusergroup = new RaduserGroup();
                $radusergroup->username = $request->get("username");
                $radusergroup->groupname = "BE-9216k";
                $radusergroup->name = "ghaznavi";
                $radusergroup->priority = "0";

                ////inserting into useripstatus

                $useripstatus = new UserIPStatus();
                $useripstatus->username = $request->get("username");
                $useripstatus->ip = $ip;
                $useripstatus->type = "usual_ip";

                //cacti graph

                $graph = new CactiGraph();
                $graph->user_id = $request->get("username");
                $graph->graph_no = "0";

                ///cacti graph end

                DB::transaction(function () use (
                    $useripstatus,
                    $radusergroup,
                    $userusualIPs,
                    $radreply,
                    $RadCheck,
                    $RadCheck2,
                    $RadCheck3,
                    $graph,
                    $userAmount
                ) {
                    $radreply->save();
                    $useripstatus->save();
                    $radusergroup->save();
                    $userusualIPs->save();
                    $RadCheck->save();
                    $RadCheck2->save();
                    $RadCheck3->save();
                    $graph->save();
                    $userAmount->save();

                    /*
                     * insert new record for question category
                     */
                });
                break;
            case "subdealer":
                $active = 0;
                // validation
                $this->validate($request, [
                    "username" => "required|unique:user_info",
                    "manager_id" => "required",
                    "resellerid" => "required",
                    "dealerid" => "required",
                    "sub_dealer_id" => "required|unique:user_info",
                    "password" => "required|confirmed",
                ]);

                $user->username = $request->get("username");
                $user->manager_id = $request->get("manager_id");
                $user->resellerid = $request->get("resellerid");
                $user->dealerid = $request->get("dealerid");
                $user->password = Hash::make($request->get("password"));
                $user->sub_dealer_id = $request->get("sub_dealer_id");
                $user->trader_id = null;
                $user->profile = "BE-9216k";
                $user->name = "ghaznavi";
                // default amount is zero;
                $userAmount = new UserAmount();
                $userAmount->username = $request->get("username");
                $userAmount->status = "subdealer";
                $userAmount->amount = 0;
                $userAmount->credit_limit = 0;

                //assigned server

                $nas_type1 = AssignNasType::where([
                    "manager_id" => Auth::user()->manager_id,
                ])->first();

                $assignas = $nas_type1->nas_type;

                $server = new AssignNasType();
                $server->dealerid = $request->get("dealerid");
                $server->resellerid = $request->get("resellerid");
                $server->manager_id = $request->get("manager_id");
                $server->sub_dealer_id = $request->get("sub_dealer_id");
                $server->trader_id = null;
                $server->nas_type = $assignas;
                $server->save();

                // saving in redCheck: entry - 1
                $RadCheck = new RadCheck();
                $RadCheck->username = $request->get("username");
                $RadCheck->attribute = "Cleartext-Password";
                $RadCheck->op = ":=";
                $RadCheck->value = $request->get("password");
                $RadCheck->resellerid = $request->get("resellerid");
                $RadCheck->manager_id = $request->get("manager_id");
                $RadCheck->status = "subdealer";
                $RadCheck->dealerid = $request->get("dealerid");
                $RadCheck->sub_dealer_id = $request->get("sub_dealer_id");
                $RadCheck->trader_id = null;
                $RadCheck->svlan = $request->get("dealerid");

                ////
                // saving in redCheck: entry - 2
                $RadCheck2 = new RadCheck();
                $RadCheck2->username = $request->get("username");
                $RadCheck2->attribute = "Simultaneous-Use";
                $RadCheck2->op = ":=";
                $RadCheck2->value = "1";
                $RadCheck2->resellerid = $request->get("resellerid");
                $RadCheck2->manager_id = $request->get("manager_id");
                $RadCheck2->status = "subdealer";
                $RadCheck2->dealerid = $request->get("dealerid");
                $RadCheck2->sub_dealer_id = $request->get("sub_dealer_id");
                $RadCheck2->trader_id = null;
                $RadCheck2->svlan = $request->get("dealerid");

                ///
                // saving in redCheck: entry - 3
                $RadCheck3 = new RadCheck();
                $RadCheck3->username = $request->get("username");
                $RadCheck3->attribute = "Calling-Station-Id";
                $RadCheck3->op = ":=";
                $RadCheck3->value = "NEW";
                $RadCheck3->resellerid = $request->get("resellerid");
                $RadCheck3->manager_id = $request->get("manager_id");
                $RadCheck3->status = "subdealer";
                $RadCheck3->dealerid = $request->get("dealerid");
                $RadCheck3->sub_dealer_id = $request->get("sub_dealer_id");
                $RadCheck3->trader_id = null;
                $RadCheck3->svlan = $request->get("dealerid");

                ///////Getting IP from usualIP
                $userusualIPs = UserUsualIP::where(["status" => "0"])->first();
                $ip = $userusualIPs->ip;

                // inserting ip in radreply
                $radreply = new Radreply();
                $radreply->username = $request->get("username");
                $radreply->attribute = "Framed-IP-Address";
                $radreply->op = "=";
                $radreply->value = $ip;
                $radreply->dealerid = $request->get("dealerid");
                $radreply->resellerid = $request->get("resellerid");
                $radreply->sub_dealer_id = $request->get("sub_dealer_id");
                $radreply->manager_id = $request->get("manager_id");
                $radreply->trader_id = null;

                // changing status to 1 of got ip in usualIP
                $userusualIPs->status = "1";

                // inserting ip in radusergroup
                $radusergroup = new RaduserGroup();
                $radusergroup->username = $request->get("username");
                $radusergroup->groupname = "DISABLED";
                $radusergroup->name = "DISABLED";
                $radusergroup->priority = "0";

                ////inserting into useripstatus

                $useripstatus = new UserIPStatus();
                $useripstatus->username = $request->get("username");
                $useripstatus->ip = $ip;
                $useripstatus->type = "usual_ip";

                // Cactigroup

                $graph = new CactiGraph();
                $graph->user_id = $request->get("username");
                $graph->graph_no = "0";

                DB::transaction(function () use (
                    $useripstatus,
                    $radusergroup,
                    $userusualIPs,
                    $radreply,
                    $RadCheck,
                    $RadCheck2,
                    $RadCheck3,
                    $graph,
                    $userAmount
                ) {
                    $radreply->save();
                    $useripstatus->save();
                    $radusergroup->save();
                    $userusualIPs->save();
                    $RadCheck->save();
                    $RadCheck2->save();
                    $RadCheck3->save();
                    $graph->save();
                    $userAmount->save();

                    /*
                     * insert new record for question category
                     */
                });
                break;
            case "trader":
                $active = 0;
                // validation
                $this->validate($request, [
                    "username" => "required|unique:user_info",
                    "manager_id" => "required",
                    "resellerid" => "required",
                    "dealerid" => "required",
                    "sub_dealer_id" => "required",
                    "trader_id" => "required|unique:user_info",
                    "password" => "required|confirmed",
                ]);

                $user->username = $request->get("username");
                $user->manager_id = $request->get("manager_id");
                $user->resellerid = $request->get("resellerid");
                $user->dealerid = $request->get("dealerid");
                $user->password = Hash::make($request->get("password"));
                $user->sub_dealer_id = $request->get("sub_dealer_id");
                $user->trader_id = $request->get("trader_id");
                $user->profile = "BE-9216k";
                $user->name = "ghaznavi";

                // default amount is zero;
                $userAmount = new UserAmount();
                $userAmount->username = $request->get("username");
                $userAmount->status = "trader";
                $userAmount->amount = 0;
                $userAmount->credit_limit = 0;

                //assigned server

                $nas_type1 = AssignNasType::where([
                    "manager_id" => Auth::user()->manager_id,
                ])->first();

                $assignas = $nas_type1->nas_type;

                $server = new AssignNasType();
                $server->dealerid = $request->get("dealerid");
                $server->resellerid = $request->get("resellerid");
                $server->manager_id = $request->get("manager_id");
                $server->sub_dealer_id = $request->get("sub_dealer_id");
                $server->trader_id = $request->get("trader_id");
                $server->nas_type = $assignas;
                $server->save();
                // saving in redCheck: entry - 1
                $RadCheck = new RadCheck();
                $RadCheck->username = $request->get("username");
                $RadCheck->attribute = "Cleartext-Password";
                $RadCheck->op = ":=";
                $RadCheck->value = $request->get("password");
                $RadCheck->resellerid = $request->get("resellerid");
                $RadCheck->manager_id = $request->get("manager_id");
                $RadCheck->status = "trader";
                $RadCheck->dealerid = $request->get("dealerid");
                $RadCheck->sub_dealer_id = $request->get("sub_dealer_id");
                $RadCheck->trader_id = $request->get("trader_id");
                $RadCheck->svlan = $request->get("dealerid");

                ////
                // saving in redCheck: entry - 2
                $RadCheck2 = new RadCheck();
                $RadCheck2->username = $request->get("username");
                $RadCheck2->attribute = "Simultaneous-Use";
                $RadCheck2->op = ":=";
                $RadCheck2->value = "1";
                $RadCheck2->resellerid = $request->get("resellerid");
                $RadCheck2->manager_id = $request->get("manager_id");
                $RadCheck2->status = "trader";
                $RadCheck2->dealerid = $request->get("dealerid");
                $RadCheck2->sub_dealer_id = $request->get("sub_dealer_id");
                $RadCheck2->trader_id = $request->get("trader_id");
                $RadCheck2->svlan = $request->get("dealerid");

                ///
                // saving in redCheck: entry - 3
                $RadCheck3 = new RadCheck();
                $RadCheck3->username = $request->get("username");
                $RadCheck3->attribute = "Calling-Station-Id";
                $RadCheck3->op = ":=";
                $RadCheck3->value = "NEW";
                $RadCheck3->resellerid = $request->get("resellerid");
                $RadCheck3->manager_id = $request->get("manager_id");
                $RadCheck3->status = "trader";
                $RadCheck3->dealerid = $request->get("dealerid");
                $RadCheck3->sub_dealer_id = $request->get("sub_dealer_id");
                $RadCheck3->trader_id = $request->get("trader_id");
                $RadCheck3->svlan = $request->get("dealerid");

                ///

                // inserting ip in radusergroup
                $radusergroup = new RaduserGroup();
                $radusergroup->username = $request->get("username");
                $radusergroup->groupname = "DISABLED";
                $radusergroup->name = "DISABLED";
                $radusergroup->priority = "0";

                // Cactigroup

                $graph = new CactiGraph();
                $graph->user_id = $request->get("username");
                $graph->graph_no = "0";

                DB::transaction(function () use (
                    $radusergroup,
                    $RadCheck,
                    $RadCheck2,
                    $RadCheck3,
                    $graph,
                    $userAmount
                ) {
                    $radusergroup->save();

                    $RadCheck->save();
                    $RadCheck2->save();
                    $RadCheck3->save();
                    $graph->save();
                    $userAmount->save();

                    /*
                     * insert new record for question category
                     */
                });
                break;
            case "user":

                $active = 1;

                // validation
                $this->validate($request, [
                    "username" => "required|unique:user_info",
                    "manager_id" => "required",
                    "resellerid" => "required",
                    "dealerid" => "required",

                    "password" => "required|confirmed",
                ]);
                $user->username = $request->get("username");
                $user->manager_id = $request->get("manager_id");
                $user->resellerid = $request->get("resellerid");
                $user->dealerid = $request->get("dealerid");
                $user->password = Hash::make($request->get("password"));
                if (Auth::user()->status == "dealer") {
                    $user->sub_dealer_id = null;
                } elseif (Auth::user()->status == "subdealer") {
                    $user->sub_dealer_id = $request->get("sub_dealer_id");
                } else {
                    $user->sub_dealer_id = $request->get("sub_dealer_id");
                    $user->trader_id = $request->get("trader_id");
                }
                $profile = Profile::where('name',$request->get("profile"))->first();
                $user->profile = $profile->groupname;

                $dataprofile1 = $request->get("profile");
                $dataprofile2 = str_replace("BE-", "", $dataprofile1);
                $dataprofile = str_replace("k", "", $dataprofile2);

                $checkname = DealerProfileRate::where(
                    "dealerid",
                    $request->get("dealerid")
                )
                    ->where("groupname", $dataprofile)
                    ->first();
                $name = @$checkname["name"];
                $user->name = $profile->name;
                $accessData = DealerFUP::where(
                    "dealerid",
                    $request->get("dealerid")
                )
                    ->where("groupname", $dataprofile)
                    ->first();
                $datalimit2 = @$accessData["datalimit"];

                $user->qt_total = $datalimit2;
                // saving in redCheck: entry - 1
                $RadCheck = new RadCheck();
                $RadCheck->username = $request->get("username");
                $RadCheck->attribute = "Cleartext-Password";
                $RadCheck->op = ":=";
                $RadCheck->value = $request->get("password");
                $RadCheck->resellerid = $request->get("resellerid");
                $RadCheck->manager_id = $request->get("manager_id");
                $RadCheck->status = "user";
                $RadCheck->dealerid = $request->get("dealerid");
                $RadCheck->sub_dealer_id = $request->get("sub_dealer_id");
                $RadCheck->trader_id = $request->get("trader_id");
                $RadCheck->svlan = $request->get("dealerid");

                ////
                // saving in redCheck: entry - 2
                $RadCheck2 = new RadCheck();
                $RadCheck2->username = $request->get("username");
                $RadCheck2->attribute = "Simultaneous-Use";
                $RadCheck2->op = ":=";
                $RadCheck2->value = "1";
                $RadCheck2->resellerid = $request->get("resellerid");
                $RadCheck2->manager_id = $request->get("manager_id");
                $RadCheck2->status = "user";
                $RadCheck2->dealerid = $request->get("dealerid");
                $RadCheck2->sub_dealer_id = $request->get("sub_dealer_id");
                $RadCheck2->trader_id = $request->get("trader_id");
                $RadCheck2->svlan = $request->get("dealerid");

                ///
                // saving in redCheck: entry - 3
                $RadCheck3 = new RadCheck();
                $RadCheck3->username = $request->get("username");
                $RadCheck3->attribute = "Calling-Station-Id";
                $RadCheck3->op = ":=";
                $RadCheck3->value = "NEW";
                $RadCheck3->resellerid = $request->get("resellerid");
                $RadCheck3->manager_id = $request->get("manager_id");
                $RadCheck3->status = "user";
                $RadCheck3->dealerid = $request->get("dealerid");
                $RadCheck3->sub_dealer_id = $request->get("sub_dealer_id");
                $RadCheck3->trader_id = $request->get("trader_id");
                $RadCheck3->svlan = $request->get("dealerid");

                $UserStatusInfo = new UserStatusInfo();
                $UserStatusInfo->username = $request->get("username");
                $UserStatusInfo->card_expire_on = "1990-03-03";
                $UserStatusInfo->card_charge_by = Auth::user()->username;
                $UserStatusInfo->expire_datetime = "1990-03-03 12:00:00";
                $UserStatusInfo->card_charge_by_ip = $request->ip();

                //  // inserting ip in radusergroup
                $radusergroup = new RaduserGroup();
                $radusergroup->username = $request->get("username");
                $radusergroup->groupname = "NEW";
                $radusergroup->name = "NEW";
                $radusergroup->priority = "0";

                $userExpire = new ExpireUser();
                $userExpire->username = $request->get("username");
                $userExpire->status = "expire";
                $userExpire->last_update = date("Y-m-d H:i:s");

                DB::transaction(function () use (
                    $UserStatusInfo,
                    $radusergroup,
                    $RadCheck,
                    $RadCheck2,
                    $RadCheck3,
                    $userExpire
                ) {
                    $UserStatusInfo->save();
                    $radusergroup->save();

                    $RadCheck->save();
                    $RadCheck2->save();
                    $RadCheck3->save();
                    $userExpire->save();

                    /*
                     * insert new record for question category
                     */
                });
                break;
        }
        $user->firstname = $request->get("fname");
        $user->lastname = $request->get("lname");
        $user->address = $request->get("address");
        $user->permanent_address = $request->get("address");
        $user->mobilephone = $request->get("mobile_number");
        $user->homephone = $request->get("land_number");
        $user->nic = $request->get("nic");
        $user->email = $request->get("mail");
        $user->area = $request->get("area");
        $user->creationdate = date("Y-m-d");
        $user->creationby = Auth::user()->status;
        $user->creationbyip = $request->ip();
        $user->disabled = "";
        $user->active = 1;
        $user->disabled_old_profile = "";
        $user->disabled_expired = "";
        // $user->disabled_date = date('Y-m-d H:m:s',strtotime('0000-00-00 00:00:00'));
        $user->verified = 0;
        $user->status = $status;

          /* 30 Jan 2023 */
          /*
            DB::table("partner_themes")
                        ->where("username", $request->get("resellerid"))
                        ->update(["color" => $request->get("theme_color")]);
          */

        DB::transaction(function () use ($user) {
            $user->save();

            /*
             * insert new record for question category
             */
        });
        $Uname = $request->get("username");
        $accessID = UserInfo::where("username", $Uname)->first();


        //inserting menus for resller // 26 jan 2022

        if ($accessID->status == "reseller") {
            $accessID = $accessID->id;
            $subMenu = SubMenu::where("flag", "cp")->get();

            //dd($subMenu);

            foreach ($subMenu as $key => $submenu) {
                $ac_id = $submenu->id;
                $accessMenu = new UserMenuAccess();
                $accessMenu->user_id = $accessID;
                $accessMenu->sub_menu_id = $submenu->id;
                $sts = 0;
                if (
                    $ac_id == 1 ||
                    $ac_id == 3 ||
                    $ac_id == 6 ||
                    $ac_id == 7 ||
                    $ac_id == 14 ||
                    $ac_id == 15 ||
                    $ac_id == 16 ||
                    $ac_id == 17 ||
                    $ac_id == 18 ||
                    $ac_id == 19 ||
                    $ac_id == 20 ||
                    $ac_id == 21 ||
                    $ac_id == 22 ||
                    $ac_id == 23 ||
                    $ac_id == 24 ||
                    $ac_id == 25 ||
                    $ac_id == 26 ||
                    $ac_id == 27 ||
                    $ac_id == 28 ||
                    $ac_id == 29 ||
                    $ac_id == 30 ||
                    $ac_id == 31 ||
                    $ac_id == 32 ||
                    $ac_id == 33 ||
                    $ac_id == 38 ||
                    $ac_id == 39 ||
                    $ac_id == 40
                ) {
                    $sts = 1;
                } else {
                    $sts = 0;
                }
                $accessMenu->status = $sts;
                $accessMenu->created_at = NOW();
                $accessMenu->save();
            }
        } elseif ($accessID->status == "dealer") {
            $accessID = $accessID->id;
            $subMenu = SubMenu::where("flag", "cp")->get();
            foreach ($subMenu as $key => $submenu) {
                $ac_id = $submenu->id;
                $accessMenu = new UserMenuAccess();
                $accessMenu->user_id = $accessID;
                $accessMenu->sub_menu_id = $submenu->id;
                $sts = 0;
                if (
                    $ac_id == 1 ||
                    $ac_id == 4 ||
                    $ac_id == 6 ||
                    $ac_id == 7 ||
                    $ac_id == 8 ||
                    $ac_id == 9 ||
                    $ac_id == 10 ||
                    $ac_id == 11 ||
                    $ac_id == 12 ||
                    $ac_id == 13 ||
                    $ac_id == 14 ||
                    $ac_id == 19 ||
                    $ac_id == 20 ||
                    $ac_id == 21 ||
                    $ac_id == 24 ||
                    $ac_id == 25 ||
                    $ac_id == 26 ||
                    $ac_id == 28 ||
                    $ac_id == 32 ||
                    $ac_id == 33 ||
                    $ac_id == 34 ||
                    $ac_id == 35 ||
                    $ac_id == 36 ||
                    $ac_id == 37 ||
                    $ac_id == 38 ||
                    $ac_id == 60
                ) {
                    $sts = 1;
                } else {
                    $sts = 0;
                }
                $accessMenu->status = $sts;
                $accessMenu->created_at = NOW();
                $accessMenu->save();
            }
        } elseif ($accessID->status == "subdealer") {
            $accessID = $accessID->id;
            $subMenu = SubMenu::where("flag", "cp")->get();
            foreach ($subMenu as $key => $submenu) {
                $ac_id = $submenu->id;
                $accessMenu = new UserMenuAccess();
                $accessMenu->user_id = $accessID;
                $accessMenu->sub_menu_id = $submenu->id;
                $sts = 0;
                if (
                    $ac_id == 1 ||
                    $ac_id == 6 ||
                    $ac_id == 7 ||
                    $ac_id == 8 ||
                    $ac_id == 9 ||
                    $ac_id == 10 ||
                    $ac_id == 11 ||
                    $ac_id == 12 ||
                    $ac_id == 13 ||
                    $ac_id == 19 ||
                    $ac_id == 34 ||
                    $ac_id == 35 ||
                    $ac_id == 36 ||
                    $ac_id == 37 ||
                    $ac_id == 60
                ) {
                    $sts = 1;
                } else {
                    $sts = 0;
                }
                $accessMenu->status = $sts;
                $accessMenu->created_at = NOW();
                $accessMenu->save();
            }
        } elseif ($accessID->status == "trader") {
            $accessID = $accessID->id;
            $subMenu = SubMenu::where("flag", "cp")->get();
            foreach ($subMenu as $key => $submenu) {
                $ac_id = $submenu->id;
                $accessMenu = new UserMenuAccess();
                $accessMenu->user_id = $accessID;
                $accessMenu->sub_menu_id = $submenu->id;
                $sts = 0;
                if (
                    $ac_id == 1 ||
                    $ac_id == 6 ||
                    $ac_id == 7 ||
                    $ac_id == 8 ||
                    $ac_id == 9 ||
                    $ac_id == 10 ||
                    $ac_id == 11 ||
                    $ac_id == 12 ||
                    $ac_id == 13 ||
                    $ac_id == 19 ||
                    $ac_id == 34 ||
                    $ac_id == 35 ||
                    $ac_id == 36 ||
                    $ac_id == 37 ||
                    $ac_id == 60
                ) {
                    $sts = 1;
                } else {
                    $sts = 0;
                }
                $accessMenu->status = $sts;
                $accessMenu->created_at = NOW();
                $accessMenu->save();
            }
        }
        session()->flash("success", " created success fully.");
        return redirect()->route("users.user.index1", ["status" => $status]);
    }

    public function edit($status, $id)
    {
        $url = url()->previous();
        switch ($status) {
            case "reseller":
                $reseller = UserInfo::find($id);
                $profileList = ManagerProfileRate::where([
                    "manager_id" => $reseller->manager_id,
                ])
                    ->orderby("groupname")
                    ->get();
                // $profileList = Profile::all();
                $assignedProfileRates = ResellerProfileRate::where('resellerid',$reseller->resellerid)->get(); // assign
                $assignedProfileNameList = [];
                foreach ($assignedProfileRates as $profileRate) {
                    $assignedProfileNameList[] = ucfirst(
                        $profileRate->name
                    );
                }
                $userAmount = UserAmount::where([
                    "username" => $reseller->username,
                ])->first();

                return view("users.manager.update_reseller", [
                    "id" => $id,
                    "reseller" => $reseller,
                    "profileList" => $profileList,

                    "assignedProfileRates" => $assignedProfileRates,
                    "assignedProfileNameList" => $assignedProfileNameList,
                    "userAmount" => $userAmount,
                ]);
                break;
            case "dealer":
                $dealer = UserInfo::find($id);
                $profileList = ResellerProfileRate::where([
                    "resellerid" => $dealer->resellerid,
                ])
                    ->orderby("groupname")
                    ->get();
                $graph1 = CactiGraph::where([
                    "user_id" => $dealer->username,
                ])->first();
                $ip_static_rates = StaticIp::select("rates")
                    ->where("username", $dealer->username)
                    ->first();
                $ip_amount = 0;
                if (empty($ip_static_rates)) {
                    $ip_amount = 0;
                } else {
                    $ip_amount = $ip_static_rates["rates"];
                }

                $assignedProfileRates = DealerProfileRate::where('dealerid',$dealer->dealerid)->get(); // assign
                $assignedProfileNameList = [];
                foreach ($assignedProfileRates as $profileRate) {
                    $assignedProfileNameList[] = ucfirst(
                        $profileRate->name
                    );
                }
                $nas_type = Nas::all();
                $userAmount = UserAmount::where([
                    "username" => $dealer->username,
                ])->first();
                $dhcp_server = Dhcp_server::all();
                return view("users.reseller.update_dealer", [
                    "id" => $id,
                    "dealer" => $dealer,
                    "profileList" => $profileList,
                    "nas_type" => $nas_type,
                    "assignedProfileRates" => $assignedProfileRates,
                    "assignedProfileNameList" => $assignedProfileNameList,
                    "graph1" => $graph1,
                    "userAmount" => $userAmount,
                    "ip_amount" => $ip_amount,
                    "dhcp_server" => $dhcp_server,
                ]);
                break;
            case "subdealer":
                $subdealer = UserInfo::find($id);
                $profileList = DealerProfileRate::where([
                    "dealerid" => $subdealer->dealerid,
                ])
                    ->orderby("groupname")
                    ->get();
                $graph1 = CactiGraph::where([
                    "user_id" => $subdealer->username,
                ])->first();

                $assignedProfileRates = SubdealerProfileRate::where('sub_dealer_id',$subdealer->sub_dealer_id)->get();// assign

                $assignedProfileNameList = [];
                foreach ($assignedProfileRates as $profileRate) {
                    $assignedProfileNameList[] = ucfirst(
                        $profileRate->name
                    );
                }

                return view("users.dealer.update_sub_dealer", [
                    "id" => $id,
                    "subdealer" => $subdealer,
                    "profileList" => $profileList,
                    "assignedProfileRates" => $assignedProfileRates,
                    "assignedProfileNameList" => $assignedProfileNameList,
                    "graph1" => $graph1,
                ]);
                break;
            case "trader":
                $trader = UserInfo::find($id);
                $profileList = SubdealerProfileRate::where([
                    "sub_dealer_id" => $trader->sub_dealer_id,
                ])
                    ->orderby("groupname")
                    ->get();
                $graph1 = CactiGraph::where([
                    "user_id" => $trader->username,
                ])->first();

                $assignedProfileRates = TraderProfileRate::where('trader_id',$trader->trader_id)->get(); // assign

                $assignedProfileNameList = [];
                foreach ($assignedProfileRates as $profileRate) {
                    $assignedProfileNameList[] = ucfirst(
                        $profileRate->name
                    );
                }

                return view("users.sub_dealer.update_trader", [
                    "id" => $id,
                    "trader" => $trader,
                    "profileList" => $profileList,
                    "assignedProfileRates" => $assignedProfileRates,
                    "assignedProfileNameList" => $assignedProfileNameList,
                    "graph1" => $graph1,
                ]);
                break;
            case "user":

                $user = UserInfo::find($id);
                $status = Auth::user()->status;

                if ($status == "dealer" || $status == "inhouse") {
                    if (Auth::user()->dealerid == $user->dealerid) {
                        $serverip = StaticIPServer::where([
                            "dealerid" => Auth::user()->dealerid,
                            "status" => "NEW",
                        ])->get();
                        return view("users.dealer.update_users", [
                            "id" => $id,
                            "user" => $user,
                            "serverip" => $serverip,
                            "url" => $url,
                        ]);
                    } else {
                        return redirect()->route("users.dashboard");
                    }
                } elseif ($status == "subdealer") {
                    if (Auth::user()->sub_dealer_id == $user->sub_dealer_id) {
                        return view("users.dealer.update_users", [
                            "id" => $id,
                            "user" => $user,
                            "url" => $url,
                        ]);
                    } else {
                        return redirect()->route("users.dashboard");
                    }
                } else {
                    if (Auth::user()->trader_id == $user->trader_id) {
                        return view("users.dealer.update_users", [
                            "id" => $id,
                            "user" => $user,
                            "url" => $url,
                        ]);
                    } else {
                        return redirect()->route("users.dashboard");
                    }
                }
                break;
            default:
                return redirect()->route("users.dashboard");
        }
    }

    /////// show profile////////
    public function show(Request $request, $status)
    {

        $id = $request->get("id");
        if ($id) {
            switch ($status) {
                case "reseller":
                    $reseller = UserInfo::find($id);
                    $download = "";
                    $upload = "";
                    $userProfileRates = $reseller->reseller_profile_rate;
                    $userRadCheck = RadCheck::where([
                        "username" => $reseller->username,
                        "attribute" => "Cleartext-Password",
                    ])->first();
                    $download = RadAcct::select(
                        "acctoutputoctets",
                        "acctstarttime"
                    )
                        ->where("acctstarttime", ">=", date("Y-m-01 00:00:00"))
                        ->where("acctstarttime", "<=", date("Y-m-t 00:00:00"))
                        ->where(["username" => $reseller->username])
                        ->get();
                    //
                    $upload = RadAcct::select(
                        "acctinputoctets",
                        "acctstarttime"
                    )
                        ->where("acctstarttime", ">=", date("Y-m-01 00:00:00"))
                        ->where("acctstarttime", "<=", date("Y-m-t 00:00:00"))
                        ->where(["username" => $reseller->username])
                        ->get();
                    if ($reseller->status == "reseller") {
                        return view("users.billing.user_detail", [
                            "user" => $reseller,
                            "userRedCheck" => $userRadCheck,
                            "userProfileRates" => $userProfileRates,

                            "download" => $download,
                            "upload" => $upload,
                        ]);
                    } else {
                        return redirect()->route("users.dashboard");
                    }
                    break;
                case "dealer":
                    $dealer = UserInfo::find($id);
                    $download = "";
                    $upload = "";

                    $userProfileRates = $dealer->dealer_profile_rates;
                    $userRadCheck = RadCheck::where([
                        "username" => $dealer->username,
                        "attribute" => "Cleartext-Password",
                    ])->first();
                    $download = RadAcct::select(
                        "acctoutputoctets",
                        "acctstarttime"
                    )
                        ->where("acctstarttime", ">=", date("Y-m-01 00:00:00"))
                        ->where("acctstarttime", "<=", date("Y-m-t 00:00:00"))
                        ->where(["username" => $dealer->username])
                        ->get();
                    //
                    $upload = RadAcct::select(
                        "acctinputoctets",
                        "acctstarttime"
                    )
                        ->where("acctstarttime", ">=", date("Y-m-01 00:00:00"))
                        ->where("acctstarttime", "<=", date("Y-m-t 00:00:00"))
                        ->where(["username" => $dealer->username])
                        ->get();
                    if ($dealer->status == "dealer") {
                        return view("users.billing.user_detail", [
                            "user" => $dealer,
                            "userRedCheck" => $userRadCheck,
                            "userProfileRates" => $userProfileRates,
                            "download" => $download,
                            "upload" => $upload,
                        ]);
                    } else {
                        return redirect()->route("users.dashboard");
                    }
                    break;
                case "subdealer":
                    $subdealer = UserInfo::find($id);
                    $download = "";
                    $upload = "";
                    $userProfileRates = $subdealer->subdealer_profile_rates;
                    $userRadCheck = RadCheck::where([
                        "username" => $subdealer->username,
                        "attribute" => "Cleartext-Password",
                    ])->first();

                    // daily data usage
                    $download = RadAcct::select(
                        "acctoutputoctets",
                        "acctstarttime"
                    )
                        ->where("acctstarttime", ">=", date("Y-m-01 00:00:00"))
                        ->where("acctstarttime", "<=", date("Y-m-t 00:00:00"))
                        ->where(["username" => $subdealer->username])
                        ->get();
                    //
                    $upload = RadAcct::select(
                        "acctinputoctets",
                        "acctstarttime"
                    )
                        ->where("acctstarttime", ">=", date("Y-m-01 00:00:00"))
                        ->where("acctstarttime", "<=", date("Y-m-t 00:00:00"))
                        ->where(["username" => $subdealer->username])
                        ->get();
                    if ($subdealer->status == "subdealer") {
                        return view("users.billing.user_detail", [
                            "user" => $subdealer,
                            "userRedCheck" => $userRadCheck,
                            "userProfileRates" => $userProfileRates,
                            "download" => $download,
                            "upload" => $upload,
                        ]);
                    } else {
                        return redirect()->route("users.dashboard");
                    }
                    break;
                case "user":
                    $user = UserInfo::find($id);
                    $status = Auth::user()->status;
                    if ($status == "manager") {
                        if (Auth::user()->manager_id == $user->manager_id) {
                            $userRadCheck = RadCheck::where([
                                "username" => $user->username,
                                "attribute" => "Cleartext-Password",
                            ])->first();
                            $userstatusinfo = UserStatusInfo::where([
                                "username" => $user->username,
                            ])->first();
                            $userexpirelog = UserExpireLog::where([
                                "username" => $user->username,
                            ])->first();
                            $package = $user->profile;
                            $packagename = $user->name;

                            $package = str_replace("BE-", "", $package);
                            $package = str_replace("k", "", $package);
                            $profile = Profile::where([
                                "name" => $packagename,
                            ])->first();

                            $cur_pro = RaduserGroup::select("name")
                                ->where(["username" => $user->username])
                                ->first();
                            $package = str_replace(
                                "BE-",
                                "",
                                $cur_pro->groupname
                            );
                            $package = str_replace("k", "", $package);
                            // $cur_pro = Profile::where(['groupname'=>$package])->first();
                            // daily data usage
                            $download = RadAcct::select(
                                "acctoutputoctets",
                                "acctstarttime"
                            )
                                ->where(
                                    "acctstarttime",
                                    ">=",
                                    date("Y-m-01 00:00:00")
                                )
                                ->where(
                                    "acctstarttime",
                                    "<=",
                                    date("Y-m-t 00:00:00")
                                )
                                ->where(["username" => $user->username])
                                ->get();
                            //
                            $upload = RadAcct::select(
                                "acctinputoctets",
                                "acctstarttime"
                            )
                                ->where(
                                    "acctstarttime",
                                    ">=",
                                    date("Y-m-01 00:00:00")
                                )
                                ->where(
                                    "acctstarttime",
                                    "<=",
                                    date("Y-m-t 00:00:00")
                                )
                                ->where(["username" => $user->username])
                                ->get();

                            return view("users.billing.user_detail", [
                                "user" => $user,
                                "userRedCheck" => $userRadCheck,
                                "userstatusinfo" => $userstatusinfo,
                                "userexpirelog" => $userexpirelog,
                                "profile" => $profile,
                                "cur_profile" => $cur_pro,
                                "download" => $download,
                                "upload" => $upload,
                            ]);
                        } else {
                            return redirect()->route("users.dashboard");
                        }
                    } elseif ($status == "reseller") {
                        if (Auth::user()->resellerid == $user->resellerid) {
                            $userRadCheck = RadCheck::where([
                                "username" => $user->username,
                                "attribute" => "Cleartext-Password",
                            ])->first();
                            $userstatusinfo = UserStatusInfo::where([
                                "username" => $user->username,
                            ])->first();
                            $userexpirelog = UserExpireLog::where([
                                "username" => $user->username,
                            ])->first();
                            $package = $user->profile;
                            $packagename = $user->name;


                            $package = str_replace("BE-", "", $package);
                            $package = str_replace("k", "", $package);
                            $profile = Profile::where([
                                "name" => $packagename,
                            ])->first();

                            $cur_pro = RaduserGroup::select("name")
                                ->where(["username" => $user->username])
                                ->first();
                            $package = str_replace(
                                "BE-",
                                "",
                                $cur_pro->groupname
                            );
                            $package = str_replace("k", "", $package);
                            // $cur_pro = Profile::where(['groupname'=>$package])->first();
                            // daily data usage
                            $download = RadAcct::select(
                                "acctoutputoctets",
                                "acctstarttime"
                            )
                                ->where(
                                    "acctstarttime",
                                    ">=",
                                    date("Y-m-01 00:00:00")
                                )
                                ->where(
                                    "acctstarttime",
                                    "<=",
                                    date("Y-m-t 00:00:00")
                                )
                                ->where(["username" => $user->username])
                                ->get();
                            //
                            $upload = RadAcct::select(
                                "acctinputoctets",
                                "acctstarttime"
                            )
                                ->where(
                                    "acctstarttime",
                                    ">=",
                                    date("Y-m-01 00:00:00")
                                )
                                ->where(
                                    "acctstarttime",
                                    "<=",
                                    date("Y-m-t 00:00:00")
                                )
                                ->where(["username" => $user->username])
                                ->get();

                            return view("users.billing.user_detail", [
                                "user" => $user,
                                "userRedCheck" => $userRadCheck,
                                "userstatusinfo" => $userstatusinfo,
                                "userexpirelog" => $userexpirelog,
                                "profile" => $profile,
                                "cur_profile" => $cur_pro,
                                "download" => $download,
                                "upload" => $upload,
                            ]);
                        } else {
                            return redirect()->route("users.dashboard");
                        }
                    } elseif ($status == "dealer" || $status == "inhouse") {
                        if (Auth::user()->dealerid == $user->dealerid) {
                            $userRadCheck = RadCheck::where([
                                "username" => $user->username,
                                "attribute" => "Cleartext-Password",
                            ])->first();
                            $userstatusinfo = UserStatusInfo::where([
                                "username" => $user->username,
                            ])->first();
                            $userexpirelog = UserExpireLog::where([
                                "username" => $user->username,
                            ])->first();
                            $package = $user->profile;
                            $packagename = $user->name;


                            $package = str_replace("BE-", "", $package);
                            $package = str_replace("k", "", $package);
                            $profile = Profile::where([
                                "name" => $packagename,
                            ])->first();

                            $cur_pro = RaduserGroup::select("name")
                                ->where(["username" => $user->username])
                                ->first();
                            $package = str_replace(
                                "BE-",
                                "",
                                $cur_pro->groupname
                            );
                            $package = str_replace("k", "", $package);
                            // $cur_pro = Profile::where(['groupname'=>$package])->first();
                            //
                            // daily data usage
                            $download = RadAcct::select(
                                "acctoutputoctets",
                                "acctstarttime"
                            )
                                ->where(
                                    "acctstarttime",
                                    ">=",
                                    date("Y-m-01 00:00:00")
                                )
                                ->where(
                                    "acctstarttime",
                                    "<=",
                                    date("Y-m-t 00:00:00")
                                )
                                ->where(["username" => $user->username])
                                ->get();
                            //
                            $upload = RadAcct::select(
                                "acctinputoctets",
                                "acctstarttime"
                            )
                                ->where(
                                    "acctstarttime",
                                    ">=",
                                    date("Y-m-01 00:00:00")
                                )
                                ->where(
                                    "acctstarttime",
                                    "<=",
                                    date("Y-m-t 00:00:00")
                                )
                                ->where(["username" => $user->username])
                                ->get();

                            return view("users.billing.user_detail", [
                                "user" => $user,
                                "userRedCheck" => $userRadCheck,
                                "userstatusinfo" => $userstatusinfo,
                                "userexpirelog" => $userexpirelog,
                                "profile" => $profile,
                                "cur_profile" => $cur_pro,
                                "download" => $download,
                                "upload" => $upload,
                                "download" => $download,
                                "upload" => $upload,
                            ]);
                        } else {
                            return redirect()->route("users.dashboard");
                        }
                    } elseif ($status == "subdealer" || $status == "inhouse") {
                        if (
                            Auth::user()->sub_dealer_id == $user->sub_dealer_id
                        ) {
                            $userRadCheck = RadCheck::where([
                                "username" => $user->username,
                                "attribute" => "Cleartext-Password",
                            ])->first();
                            $userstatusinfo = UserStatusInfo::where([
                                "username" => $user->username,
                            ])->first();
                            $userexpirelog = UserExpireLog::where([
                                "username" => $user->username,
                            ])->first();
                            $package = $user->profile;
                            $packagename = $user->name;


                            $package = str_replace("BE-", "", $package);
                            $package = str_replace("k", "", $package);
                            $profile = Profile::where([
                                "name" => $packagename,
                            ])->first();

                            $cur_pro = RaduserGroup::select("name")
                                ->where(["username" => $user->username])
                                ->first();
                            $package = str_replace(
                                "BE-",
                                "",
                                $cur_pro->groupname
                            );
                            $package = str_replace("k", "", $package);
                            // $cur_pro = Profile::where(['groupname'=>$package])->first();
                            // daily data usage
                            $download = RadAcct::select(
                                "acctoutputoctets",
                                "acctstarttime"
                            )
                                ->where(
                                    "acctstarttime",
                                    ">=",
                                    date("Y-m-01 00:00:00")
                                )
                                ->where(
                                    "acctstarttime",
                                    "<=",
                                    date("Y-m-t 00:00:00")
                                )
                                ->where(["username" => $user->username])
                                ->get();
                            //
                            $upload = RadAcct::select(
                                "acctinputoctets",
                                "acctstarttime"
                            )
                                ->where(
                                    "acctstarttime",
                                    ">=",
                                    date("Y-m-01 00:00:00")
                                )
                                ->where(
                                    "acctstarttime",
                                    "<=",
                                    date("Y-m-t 00:00:00")
                                )
                                ->where(["username" => $user->username])
                                ->get();

                            return view("users.billing.user_detail", [
                                "user" => $user,
                                "userRedCheck" => $userRadCheck,
                                "userstatusinfo" => $userstatusinfo,
                                "userexpirelog" => $userexpirelog,
                                "profile" => $profile,
                                "cur_profile" => $cur_pro,
                                "download" => $download,
                                "upload" => $upload,
                            ]);
                        } else {
                            return redirect()->route("users.dashboard");
                        }
                    }
                    break;
                default:
                    return redirect()->route("users.dashboard");
            }
        } else {
            return redirect()->route("users.dashboard");
        }
    }

    /////// end profile///////
    public function update(Request $request, $status, $id)
    {

       /* 30 Jan 2023 */

       if(!empty($request->get("theme_color")) || !empty($request->get("login_alignment"))) {
        DB::table("partner_themes_user")
                    ->where("username", $request->get("resellerid"))
                    ->update(["color" => $request->get("theme_color"),
                              "login_alignment" => $request->get("login_alignment")]);
                }

        // dd($request->username);
        $sstfromdb = $request->sstField;
        $advfromdb = $request->advField;
        switch ($status) {
            case "manager":
                $manager = UserInfo::find($id);

                $manager->firstname = $request->get("fname");
                $manager->lastname = $request->get("lname");
                $manager->address = $request->get("address");
                $manager->mobilephone = $request->get("mobile_number");
                $manager->homephone = $request->get("land_number");
                $manager->nic = $request->get("nic");
                $manager->email = $request->get("mail");
                $manager->area = $request->get("area");
                $manager->save();
                //
                session()->flash("success", "Manager success fully updated.");
                return redirect()->route("admin.user.index1", [
                    "status" => $status,
                ]);
                break;
            case "reseller":
                $reseller = UserInfo::find($id);

                $reseller->firstname = $request->get("fname");
                $reseller->lastname = $request->get("lname");
                $reseller->address = $request->get("address");
                $reseller->mobilephone = $request->get("mobile_number");
                $reseller->homephone = $request->get("land_number");
                $reseller->nic = $request->get("nic");
                $reseller->email = $request->get("mail");
                $reseller->area = $request->get("area");
                $reseller->save();

                $userAmount = UserAmount::where([
                    "username" => $reseller->username,
                ])->first();
                $userAmount->credit_limit = str_replace(
                    ",",
                    "",
                    $request->get("limit")
                );
                $userAmount->save();

                // delete existing profile rates of resller
                $dlt = ResellerProfileRate::where([
                    "resellerid" => $reseller->resellerid,
                ])->delete();
                // getting assigned profile rates
                $profileList = Profile::all();
                foreach ($profileList as $profile) {
                    $name = $profile->name;
                    $profileName = ucfirst($profile->name);
                    if ($request->has("" . $profileName)) {
                        $profileRate = $request->get("" . $profileName); // will get rate form request
                        $groupName = $profile->groupname;
                        $resellerId = $reseller->resellerid;

                        // save into reseller profile rate.
                        $resellerProfileRate = new ResellerProfileRate();
                        $resellerProfileRate->groupname = $groupName;
                        $resellerProfileRate->name = $name;
                        $resellerProfileRate->resellerid = $resellerId;
                        $resellerProfileRate->ip_rates = 0;
                        $resellerProfileRate->billing_type = "amount";
                        $resellerProfileRate->sst = 0;
                        $resellerProfileRate->adv_tax = 0;
                        $resellerProfileRate->rate = $profileRate;
                        $resellerProfileRate->final_rates = $profileRate;
                        $resellerProfileRate->save();
                    }
                }
                $isvisible = $request->isvisible;
                if ($isvisible == "on") {
                    $allowed = "yes";
                } else {
                    $allowed = "no";
                }
                $showAmount = UserAmount::where(
                    "username",
                    $reseller->username
                )->update([
                    "isvisible" => $allowed,
                ]);
                session()->flash("success", "Reseller success fully updated.");
                return redirect()->route("users.user.index1", [
                    "status" => $status,
                ]);
                break;
            case "dealer":
                $allowed = "";
                $change = "";
                $receipt = $request->get("receipt");
                $tax = $request->get("tax");
                $taxc = $request->get("taxc");
                $changeprofile = $request->get("changeprofile");
                if ($tax == "") {
                    $tax = $request->get("taxtValue");
                }
                $Allowplan = $request->get("Allowplan");
                $verification = $request->get("Verification");
                $payment_type1 = $request->get("payment_type");
                $billingType = $request->billingtype;
                $dealer = UserInfo::find($id);
                $isvisible = $request->isvisible;

                $traderAllowed = $request->traderAllow;
                if ($traderAllowed == "on") {
                    $allowtrader = "yes";
                } else {
                    $allowtrader = "no";
                }
                if ($isvisible == "on") {
                    $allowed = "yes";
                } else {
                    $allowed = "no";
                }
                if ($changeprofile == "on") {
                    $change = "yes";
                } else {
                    $change = "no";
                }

                $dealer->firstname = $request->get("fname");
                $dealer->lastname = $request->get("lname");
                $dealer->address = $request->get("address");
                $dealer->mobilephone = $request->get("mobile_number");
                $dealer->homephone = $request->get("land_number");
                $dealer->nic = $request->get("nic");
                $dealer->email = $request->get("mail");
                $dealer->area = $request->get("area");
                $dealer->save();



                DB::table("user_info")
                    ->where("dealerid", $dealer->dealerid)
                    ->update(["receipt" => $receipt]);
                // catigraph
                CactiGraph::where(["user_id" => $dealer->username])->delete();
                $newarray = [];
                $mydata = $request->get("graph");
                for ($i = 0; $i < sizeof($mydata); $i++) {
                    if ($mydata[$i] != null) {
                        $graph1 = new CactiGraph();
                        $graph1->user_id = $request->get("username");
                        $graph1->graph_no = $mydata[$i];
                        $graph1->save();
                    }
                }

                // end
                $userAmount = UserAmount::where([
                    "username" => $dealer->username,
                ])->first();

                $userAmount->credit_limit = str_replace(
                    ",",
                    "",
                    $request->get("limit")
                );
                $userAmount->save();

                if ($Allowplan == "on") {
                    $yes = "yes";
                } else {
                    $yes = "no";
                }

                if ($verification == "on") {
                    $verify = "yes";
                } else {
                    $verify = "no";
                }

                if ($payment_type1 == "on") {
                    $payment_type = "cash";
                } else {
                    $payment_type = "credit";
                }

                // delete existing profile rates of resller
                $dlt = DealerProfileRate::where([
                    "dealerid" => $dealer->dealerid,
                ])->delete();
                // getting assigned profile rates
                $profileList = Profile::all();

                foreach ($profileList as $profile) {
                    $name = $profile->name;
                    $profileName = ucfirst($profile->name);
                    if ($request->has("" . $profileName)) {
                        $profileRate = $request->get("" . $profileName);

                        // will get rate form request
                        if (Auth::user()->resellerid == "sarbaaz") {
                            $profileComision = 0;
                            $profileMax = $request->get("max" . $profileName);
                        } else {
                            $profileComision = $request->get(
                                "com" . $profileName
                            );
                            $profileMax = $request->get("max" . $profileName);
                        }
                        $groupName = $profile->groupname;

                        $checkmargin = ProfileMargins::where(
                            "dealerid",
                            $dealer["dealerid"]
                        )
                            ->where("sub_dealer_id", "=", null)
                            ->where("groupname", "=", $groupName)
                            ->first();

                        if (empty($checkmargin)) {
                            $margin = $profile->margin;
                            $total_margin = $profileRate + $margin;

                            // $culsst = $total_margin * 0.195;
                            // $sst = $culsst; //number_format($culsst,2);
                            // $culadv = ($total_margin + $sst) * 0.125;
                            $culsst = $total_margin * $sstfromdb;
                            $sst =   $culsst;//number_format($culsst,2);
                            $culadv = ($total_margin+$sst)* $advfromdb;

                            $adv = $culadv; //number_format($culadv,2);
                            $consumer = $total_margin + $sst + $adv;
                            //$final_rates = $profileRate*2 + $sst + $adv;

                            $multyply = $profileRate * 2 + $sst + $adv;
                            $final_rates = $multyply / 2;

                            $profileMargin = new ProfileMargins();
                            $profileMargin->groupname = $groupName;
                            $profileMargin->manager_id = $dealer->manager_id;
                            $profileMargin->resellerid = $dealer->resellerid;
                            $profileMargin->dealerid = $dealer->dealerid;
                            $profileMargin->sub_dealer_id = "";
                            $profileMargin->trader_id = null;
                            $profileMargin->margin = $profile->margin;
                            $profileMargin->save();
                        } else {
                            $margin = $checkmargin->margin;
                            $total_margin = $profileRate + $margin;

                            // $culsst = $total_margin * 0.195;
                            // $sst = $culsst; //number_format($culsst,2);
                            // $culadv = ($total_margin + $sst) * 0.125;

                            $culsst = $total_margin * $sstfromdb;
                            $sst =   $culsst;//number_format($culsst,2);
                            $culadv = ($total_margin+$sst)* $advfromdb;

                            $adv = $culadv; //number_format($culadv,2);
                            $consumer = $total_margin + $sst + $adv;
                            $multyply = $profileRate * 2 + $sst + $adv;
                            $final_rates = $multyply / 2;
                        }

                        $dealerid = $dealer->dealerid;

                        // save into reseller profile rate.
                        $dealerProfileRate = new DealerProfileRate();
                        $dealerProfileRate->groupname = $groupName;
                        $dealerProfileRate->name = $name;
                        $dealerProfileRate->dealerid = $dealer->dealerid;
                        $dealerProfileRate->rate = $profileRate;
                        $dealerProfileRate->sst = $sst;
                        $dealerProfileRate->sstpercentage = $sstfromdb;
                        $dealerProfileRate->advpercentage = $advfromdb;
                        $dealerProfileRate->taxgroup = "E";
                        $dealerProfileRate->adv_tax = $adv;
                        $dealerProfileRate->final_rates = $final_rates;
                        $dealerProfileRate->max = $profileMax;
                        $dealerProfileRate->consumer = $consumer;
                        $dealerProfileRate->changeprofile = $change;
                        $dealerProfileRate->show_sub_dealer = $allowed;
                        $dealerProfileRate->trader = $allowtrader;
                        $dealerProfileRate->billing_type = $billingType;
                        $dealerProfileRate->verify = $verify;
                        $dealerProfileRate->commision = $profileComision;
                        $dealerProfileRate->allowplan = $yes;
                        $dealerProfileRate->payment_type = $payment_type;
                        $dealerProfileRate->discount = $request->discount;
                        $dealerProfileRate->username = $request->username;
                        $dealerProfileRate->save();
                    }
                }
// subDealerProfileRate Update as per dealer sst adv change start.... 
$subdealerprofilerateData = SubdealerProfileRate::where('dealerid',$dealer->dealerid)->get();
// delete existing profile rates of resller
// $deleteSubdealerProfileRate = SubdealerProfileRate::where(['dealerid' => $dealer->dealerid])->delete();
// dd($subdealerprofilerateData);
foreach($subdealerprofilerateData as $profile){
 $name = $profile->name;
  // $profileName = ucfirst($profile->name);
  // if($request->has(''.$profileName)){
  //       $profileRate = $request->get(''.$profileName); // will get rate form request
  $profileRate = $profile->rate;
        $groupName = $profile->groupname;
          $checkmargin = ProfileMargins::where('dealerid',$dealer->dealerid)->where('sub_dealer_id','=',$profile->sub_dealer_id)->where('groupname','=',$groupName)->first();

        $marginByProfile = Profile::where('name',$name)->first();

        if(empty($checkmargin)){
         $margin = $marginByProfile->margin;
        $total_margin = $profileRate + $margin;

        $culsst = $total_margin * $sstfromdb;
         $sst =   $culsst;//number_format($culsst,2);
        $culadv = ($total_margin+$sst)* $advfromdb;
       
        $adv = $culadv; //number_format($culadv,2);
        $consumer = $total_margin + $sst + $adv;
        $multyply = $profileRate*2 + $sst + $adv;
        $final_rates = $multyply/2;

        }else{
          $margin = $checkmargin->margin;
        $total_margin = $profileRate + $margin;

        $culsst = $total_margin * $sstfromdb;
         $sst =   $culsst;//number_format($culsst,2);
        $culadv = ($total_margin+$sst)* $advfromdb;
       
        $adv = $culadv; //number_format($culadv,2);
        $consumer = $total_margin + $sst + $adv;
        $multyply = $profileRate*2 + $sst + $adv;
        $final_rates = $multyply/2;
        }
        // save into reseller profile rate.
        $subdealerProfileRateUpdate = SubdealerProfileRate::where('name',$profile->name)->where('dealerid',$profile->dealerid)->where('sub_dealer_id',$profile->sub_dealer_id);
        $subdealerProfileRateUpdate->update([
         'sst' => $sst,
         'adv_tax' => $adv,
         'sstpercentage' => $sstfromdb,
         'advpercentage' => $advfromdb,
         'final_rates' => $final_rates,
         'consumer' => $consumer
        ]);
        
      }
  // subDealerProfileRate Update as per dealer sst adv change End....
                ////
                $dlt = DealerFUP::where([
                    "dealerid" => $dealer->dealerid,
                ])->delete();
                $profileList = Profile::all();

                foreach ($profileList as $profile) {
                    $profilegroupname = $profile->groupname;
                    if ($request->has("" . $profilegroupname)) {
                        $profileRate = $request->get("" . $profilegroupname);
                        $groupName = $profile->groupname;
                        $userProfile = "BE-" . $groupName . "k";
                        $datasave = $profileRate * 1073741824;

                        // will get rate form request

                        $dealerFUP = new DealerFUP();
                        $dealerFUP->resellerid = $dealer->resellerid;
                        $dealerFUP->dealerid = $dealer->dealerid;
                        $dealerFUP->manager_id = $dealer->manager_id;
                        $dealerFUP->groupname = $groupName;
                        $dealerFUP->datalimit = $profileRate * 1073741824;

                        $dealerFUP->save();

                        // DB::table('user_info')->where('dealerid',$dealer->dealerid)->where('profile',$userProfile)->update('qt_total',$datasave);

                        $userinfo = UserInfo::where(
                            "dealerid",
                            $dealer->dealerid
                        )->where("profile", $userProfile);
                        $userinfo->update([
                            "qt_total" => $datasave,
                        ]);
                    }
                }
                // update static ips
                $ipassign = $request->get("ipassign");
                $ipType = $request->get("ip_type");
                $numip = $request->get("noofip");
                $thisreseller = $request->get("resellerid");
                $staticIpRates = $request->get("rates");
                $thisdealer = $request->get("dealerid");
                $thisusername = $request->get("username");

                if ($ipassign == "assign") {
                    for ($i = 0; $i < $numip; $i++) {
                        $ips = StaticIPServer::where([
                            "dealerid" => $thisdealer,
                            "type" => "static",
                        ])->count();
                        $serverip = StaticIPServer::where(["type" => $ipType])
                            ->whereNull("dealerid")
                            ->where(["resellerid" => $thisreseller])
                            ->where(["status" => "NEW"])
                            ->first();
                        $userid = StaticIp::select("username")
                            ->where("username", $thisusername)
                            ->first();
                        $ip = $serverip["ipaddress"];
                        DB::table("static_ips_server")
                            ->where("ipaddress", $ip)
                            ->update(["dealerid" => $thisdealer]);
                        if ($userid["username"] == $thisusername) {
                            if ($ipType == "static") {
                                $updateIp = StaticIp::where(
                                    "username",
                                    $thisusername
                                );
                                $updateIp->update(["numberofips" => $ips + 1]);
                            }
                        } else {
                            $staticIP = new StaticIp();
                            $staticIP->username = $dealer->username;
                            $staticIP->numberofips = $numip;
                            $staticIP->rates = $staticIpRates;
                            $staticIP->save();
                        }
                    }
                } elseif ($ipassign == "remove") {
                    for ($i = 0; $i < $numip; $i++) {
                        $ips = StaticIPServer::where([
                            "dealerid" => $thisdealer,
                            "type" => "static",
                        ])->count();
                        $serverip = StaticIPServer::where([
                            "type" => $ipType,
                            "status" => "NEW",
                        ])
                            ->where(["dealerid" => $thisdealer])
                            ->where(["resellerid" => $thisreseller])
                            ->where(["status" => "NEW"])
                            ->first();
                        $userid = StaticIp::select("username")
                            ->where("username", $thisusername)
                            ->first();
                        $ip = $serverip["ipaddress"];
                        DB::table("static_ips_server")
                            ->where("ipaddress", $ip)
                            ->update(["dealerid" => null]);
                        if ($userid["username"] == $thisusername) {
                            if (
                                $ipType == "static" &&
                                $serverip["status"] == "NEW"
                            ) {
                                $updateIp = StaticIp::where(
                                    "username",
                                    $thisusername
                                );
                                $updateIp->update(["numberofips" => $ips - 1]);
                            }
                        }
                    }
                }
                //
                // Allow never Expire Check
                $allowNeverExpire = $request->neverexpire;
                if ($allowNeverExpire == "on") {
                    $isSetNeverExpre = UserInfo::where(
                        "username",
                        $dealer->username
                    )
                        ->where("status", "dealer")
                        ->first();
                    $isSetNeverExpre->update([
                        "never_expire" => "yes",
                    ]);
                    $never = NeverExpire::join(
                        "user_info",
                        "user_info.username",
                        "never_expire.username"
                    )
                        ->where("user_info.dealerid", $dealer->dealerid)
                        ->select(
                            "never_expire.username",
                            "never_expire.old_date"
                        )
                        ->get();
                    foreach ($never as $value) {
                        // NeverExpire::whereIn('username',$never)->delete();
                        $ss = NeverExpire::where("username", $value->username);
                        $ss->update([
                            "todate" => $value->old_date,
                            "old_date" => null,
                        ]);
                    }
                } else {
                    $isSetNeverExpre = UserInfo::where(
                        "username",
                        $dealer->username
                    )
                        ->where("status", "dealer")
                        ->first();
                    $isSetNeverExpre->update([
                        "never_expire" => null,
                    ]);
                    $never = NeverExpire::join(
                        "user_info",
                        "user_info.username",
                        "never_expire.username"
                    )
                        ->where("user_info.dealerid", $dealer->dealerid)
                        ->select("never_expire.username", "never_expire.todate")
                        ->get();
                    foreach ($never as $value) {
                        // NeverExpire::whereIn('username',$never)->delete();
                        $ss = NeverExpire::where("username", $value->username);
                        $ss->update([
                            "old_date" => $value->todate,
                            "todate" => "2020-01-01",
                        ]);
                    }
                }

                //
                $dhcp_serverip = $request->dhcp_serverip;
                if (!empty($dhcp_serverip)) {
                    $servers = explode(" ", $dhcp_serverip);
                    $serverid = $servers[0];
                    $servername = $servers[1];
                    $dhcp_server = Dhcp_dealer_server::where(
                        "dealerid",
                        $dealer->dealerid
                    )->first();

                    if ($dhcp_server == null && empty($dhcp_server)) {
                        $newdhcpEntry = new Dhcp_dealer_server();
                        $newdhcpEntry->dealerid = $dealer->dealerid;
                        $newdhcpEntry->server_id = $serverid;

                        $newdhcpEntry->save();
                    } else {
                        $dhcp_server->server_id = $serverid;
                        $dhcp_server->dealerid = $dealer->dealerid;
                        $dhcp_server->save();
                    }
                }
                $showAmount = UserAmount::where(
                    "username",
                    $dealer->username
                )->update([
                    "isvisible" => $allowed,
                ]);
                $userData = UserInfo::find($id);

                $dealerid = $userData["dealerid"]; //DEALER ID
                $pNames = $request->profileNames; // PROFILE NAME
                $rates = $request->dastiAmount; //DASTI RATE
                if ($rates) {
                    foreach ($rates as $key => $dastiRate) {
                        $dealerProfileRate = DealerProfileRate::where(
                            "name",
                            $pNames[$key]
                        )->where("dealerid", $dealerid);
                        $dealerProfileRate->update([
                            "dasti_amount" => $rates[$key],
                        ]);
                    }
                }
                if ($billingType == "card") {
                    $userStatusChangeOnBillingType = UserMenuAccess::where(
                        "user_id",
                        $dealer->id
                    )->whereIn("sub_menu_id", [21, 32, 33]);
                    $userStatusChangeOnBillingType->update([
                        "status" => 0,
                    ]);
                } else {
                    $userStatusChangeOnBillingType = UserMenuAccess::where(
                        "user_id",
                        $dealer->id
                    )->whereIn("sub_menu_id", [21, 32, 33]);
                    $userStatusChangeOnBillingType->update([
                        "status" => 1,
                    ]);
                }
                //
                session()->flash("success", "Dealer success fully updated.");
                return redirect()->route("users.user.index1", [
                    "status" => $status,
                ]);
                break;
            case "subdealer":
                $subdealer = UserInfo::find($id);
                $subdealerid = $subdealer->sub_dealer_id;
                $dealerid = $subdealer->dealerid;
                $trader = $request->get("traderAllow");
                if (empty($trader)) {
                    $allowtraders = "no";
                } elseif ($trader == "on") {
                    $allowtraders = "yes";
                } else {
                    $allowtraders = "no";
                }

                $checkDealer = DealerProfileRate::where([
                    "dealerid" => $subdealer->dealerid,
                ])->first();
                $allowplan = $checkDealer->allowplan;
                $dealertax = $checkDealer->taxgroup;

                if ($allowplan == "yes") {
                    $tax = $request->get("tax");
                } else {
                    $tax = $dealertax;
                }

                $subdealer->firstname = $request->get("fname");
                $subdealer->lastname = $request->get("lname");
                $subdealer->address = $request->get("address");
                $subdealer->mobilephone = $request->get("mobile_number");
                $subdealer->homephone = $request->get("land_number");
                $subdealer->nic = $request->get("nic");
                $subdealer->email = $request->get("mail");
                $subdealer->area = $request->get("area");
                $subdealer->save();

                // //cacti graph
                CactiGraph::where([
                    "user_id" => $subdealer->username,
                ])->delete();
                $newarray = [];
                $mydata = $request->get("graph");
                for ($i = 0; $i < sizeof($mydata); $i++) {
                    if ($mydata[$i] != null) {
                        $graph1 = new CactiGraph();
                        $graph1->user_id = $request->get("username");
                        $graph1->graph_no = $mydata[$i];
                        $graph1->save();
                    }
                }

                ///cacti graph end
                $verifyOption = SubdealerProfileRate::where([
                    "sub_dealer_id" => $subdealer->sub_dealer_id,
                ])->first();
                if (!empty($verifyOption)) {
                    $verifyOption = $verifyOption->verify;
                } else {
                    $verifyOption = null;
                }

                // delete existing profile rates of resller
                $dlt = SubdealerProfileRate::where([
                    "sub_dealer_id" => $subdealer->sub_dealer_id,
                ])->delete();
                // getting assigned profile rates
                $profileList = Profile::all();
                foreach ($profileList as $profile) {
                    $name = $profile->name;
                    $profileName = ucfirst($profile->name);
                    if ($request->has("" . $profileName)) {
                        $profileRate = $request->get("" . $profileName); // will get rate form request

                        $groupName = $profile->groupname;
                        $gname = $profile->name;
                        $checkmargin = ProfileMargins::where(
                            "dealerid",
                            $dealerid
                        )
                            ->where("sub_dealer_id", "=", $subdealerid)
                            ->where("name", "=", $gname)
                            ->first();

                        if (empty($checkmargin)) {
                            $margin = $profile->margin;
                            $total_margin = $profileRate + $margin;

                            // $culsst = $total_margin * 0.195;
                            // $sst = $culsst; //number_format($culsst,2);
                            // $culadv = ($total_margin + $sst) * 0.125;
                            $culsst = $total_margin * $sstfromdb;
                            $sst =   $culsst;//number_format($culsst,2);
                           $culadv = ($total_margin+$sst)* $advfromdb;

                            $adv = $culadv; //number_format($culadv,2);
                            $consumer = $total_margin + $sst + $adv;
                            $multyply = $profileRate * 2 + $sst + $adv;
                            $final_rates = $multyply / 2;

                            $profileMargin = new ProfileMargins();
                            $profileMargin->groupname = $groupName;
                            $profileMargin->name = $gname;
                            $profileMargin->manager_id = $subdealer->manager_id;
                            $profileMargin->resellerid = $subdealer->resellerid;
                            $profileMargin->dealerid = $subdealer->dealerid;
                            $profileMargin->sub_dealer_id = $subdealerid;
                            $profileMargin->trader_id = null;
                            $profileMargin->margin = $profile->margin;
                            $profileMargin->save();
                        } else {
                            $margin = $checkmargin->margin;
                            $total_margin = $profileRate + $margin;

                            // $culsst = $total_margin * 0.195;
                            // $sst = $culsst; //number_format($culsst,2);
                            // $culadv = ($total_margin + $sst) * 0.125;
                            $culsst = $total_margin * $sstfromdb;
                            $sst =   $culsst;//number_format($culsst,2);
                           $culadv = ($total_margin+$sst)* $advfromdb;

                            $adv = $culadv; //number_format($culadv,2);
                            $consumer = $total_margin + $sst + $adv;
                            $multyply = $profileRate * 2 + $sst + $adv;
                            $final_rates = $multyply / 2;
                        }

                        // save into reseller profile rate.
                        $subdealerProfileRate = new SubdealerProfileRate();
                        $subdealerProfileRate->sub_dealer_id = $subdealerid;
                        $subdealerProfileRate->dealerid = $dealerid;
                        $subdealerProfileRate->groupname = $groupName;
                        $subdealerProfileRate->name = $name;
                        $subdealerProfileRate->taxgroup = "E";
                        $subdealerProfileRate->rate = $profileRate;
                        $subdealerProfileRate->sst = $sst;
                        $subdealerProfileRate->sstpercentage = $sstfromdb;
                        $subdealerProfileRate->advpercentage = $advfromdb;
                        $subdealerProfileRate->adv_tax = $adv;
                        $subdealerProfileRate->final_rates = $final_rates;
                        $subdealerProfileRate->consumer = $consumer;
                        $subdealerProfileRate->allow_trader = $allowtraders;
                        $subdealerProfileRate->verify = $verifyOption;

                        $subdealerProfileRate->save();
                    }
                }
                $isvisible = $request->isvisible;
                if ($isvisible == "on") {
                    $allowed = "yes";
                } else {
                    $allowed = "no";
                }
                $showAmount = UserAmount::where(
                    "username",
                    $subdealer->username
                )->update([
                    "isvisible" => $allowed,
                ]);
                session()->flash("success", "Subdealer success fully updated.");
                return redirect()->route("users.user.index1", [
                    "status" => $status,
                ]);
                break;
            case "trader":
                $trader = UserInfo::find($id);
                $traderid = $trader->trader_id;
                $dealerid = $trader->dealerid;
                $subdealerid = $trader->sub_dealer_id;

                $tax = "E";
                $trader->firstname = $request->get("fname");
                $trader->lastname = $request->get("lname");
                $trader->address = $request->get("address");
                $trader->mobilephone = $request->get("mobile_number");
                $trader->homephone = $request->get("land_number");
                $trader->nic = $request->get("nic");
                $trader->email = $request->get("mail");
                $trader->area = $request->get("area");
                $trader->save();

                // //cacti graph
                CactiGraph::where(["user_id" => $trader->username])->delete();
                $newarray = [];
                $mydata = $request->get("graph");
                for ($i = 0; $i < sizeof($mydata); $i++) {
                    if ($mydata[$i] != null) {
                        $graph1 = new CactiGraph();
                        $graph1->user_id = $request->get("username");
                        $graph1->graph_no = $mydata[$i];
                        $graph1->save();
                    }
                }
                $sstfromdb = DealerProfileRate::where('dealerid',$subdealer->dealerid)->first()->sstpercentage;
                $advfromdb = DealerProfileRate::where('dealerid',$subdealer->dealerid)->first()->advpercentage;
                // delete existing profile rates of resller
                $dlt = TraderProfileRate::where([
                    "trader_id" => $trader->trader_id,
                ])->delete();
                // getting assigned profile rates
                $profileList = Profile::all();
                foreach ($profileList as $profile) {
                    $profileName = ucfirst($profile->name);
                    if ($request->has("" . $profileName)) {
                        $profileRate = $request->get("" . $profileName); // will get rate form request

                        $groupName = $profile->groupname;
                        $groupName = $profile->groupname;
                        $checkmargin = ProfileMargins::where(
                            "dealerid",
                            $dealerid
                        )
                            ->where("sub_dealer_id", "=", $subdealerid)
                            ->where("trader_id", "=", $traderid)
                            ->where("groupname", "=", $groupName)
                            ->first();

                        if (empty($checkmargin)) {
                            $margin = $profile->margin;
                            $total_margin = $profileRate + $margin;

                            // $culsst = $total_margin * 0.195;
                            // $sst = $culsst; //number_format($culsst,2);
                            // $culadv = ($total_margin + $sst) * 0.125;

                            $culsst = $total_margin * $sstfromdb;
                            $sst =   $culsst;//number_format($culsst,2);
                           $culadv = ($total_margin+$sst)* $advfromdb;

                            $adv = $culadv; //number_format($culadv,2);
                            $consumer = $total_margin + $sst + $adv;
                            $multyply = $profileRate * 2 + $sst + $adv;
                            $final_rates = $multyply / 2;

                            $profileMargin = new ProfileMargins();
                            $profileMargin->groupname = $groupName;
                            $profileMargin->manager_id = $trader->manager_id;
                            $profileMargin->resellerid = $trader->resellerid;
                            $profileMargin->dealerid = $trader->dealerid;
                            $profileMargin->sub_dealer_id = $subdealerid;
                            $profileMargin->trader_id = $traderid;
                            $profileMargin->margin = $profile->margin;
                            $profileMargin->save();
                        } else {
                            $margin = $checkmargin->margin;
                            $total_margin = $profileRate + $margin;

                            // $culsst = $total_margin * 0.195;
                            // $sst = $culsst; //number_format($culsst,2);
                            // $culadv = ($total_margin + $sst) * 0.125;
                            $culsst = $total_margin * $sstfromdb;
                            $sst =   $culsst;//number_format($culsst,2);
                           $culadv = ($total_margin+$sst)* $advfromdb;

                            $adv = $culadv; //number_format($culadv,2);
                            $consumer = $total_margin + $sst + $adv;
                            $multyply = $profileRate * 2 + $sst + $adv;
                            $final_rates = $multyply / 2;
                        }

                        // save into reseller profile rate.
                        $traderProfileRate = new TraderProfileRate();
                        $traderProfileRate->trader_id = $traderid;
                        $traderProfileRate->sub_dealer_id =
                            $trader->sub_dealer_id;
                        $traderProfileRate->dealerid = $dealerid;
                        $traderProfileRate->groupname = $groupName;
                        $traderProfileRate->taxgroup = $tax;
                        $traderProfileRate->rate = $profileRate;
                        $traderProfileRate->sst = $sst;
                        $traderProfileRate->adv_tax = $adv;
                        $traderProfileRate->final_rates = $final_rates;

                        $traderProfileRate->save();
                    }
                }
                session()->flash("success", "Trader success fully updated.");
                return redirect()->route("users.user.index1", [
                    "status" => $status,
                ]);
                break;
            case "user":
                $user = UserInfo::find($id);

                $user->firstname = $request->get("fname");
                $user->lastname = $request->get("lname");
                $user->address = $request->get("address");
                $user->mobilephone = $request->get("mobile_number");
                $user->homephone = $request->get("land_number");
                $user->nic = $request->get("nic");
                $user->email = $request->get("mail");
                $profileRequestGroupname = Profile::where('name',$request->get("profile"))->first();
                // dd($profileRequestGroupname);
                $user->profile = 'BE-'.$profileRequestGroupname->groupname.'k';
                $dataprofile2 = str_replace("BE-", "", $user->profile);
                $dataprofile = str_replace("k", "", $dataprofile2);
                $checkname = DealerProfileRate::where(
                    "dealerid",
                    $user->dealerid
                )
                    ->where("name", $request->get("profile"))
                    ->first();
                $name = $checkname["name"];
                $user->name = $profileRequestGroupname->name;

                $user->never_expire = $request->get("neverexpire");

                $user->taxprofile = $request->get("taxprofile");

                $user->save();

                $option = $request->get("static_ip");

                if ($option == "") {
                } else {
                    $staticip = StaticIPServer::where([
                        "ipaddress" => $option,
                        "status" => "NEW",
                    ])->first();

                    $staticip->userid = $user->username;
                    $staticip->status = "USED";
                    $staticip->save();
                }

                //
                // Never Expire New Code Start
                $next_neverexpire_date = $request->nextexpire; // Fetch data from field
                $nextDate = date("Y-m-t", strtotime($next_neverexpire_date)); //set last date of month
                if ($next_neverexpire_date) {
                    $isAv = DB::select(
                        "select `username` from `never_expire` where `username` = ?",
                        [$user->username]
                    ); // select data if exist
                    if ($isAv) {
                        DB::update(
                            "update `never_expire` set  `todate` = ?, `last_update` = ? where `username` = ?",
                            [$nextDate, NOW(), $user->username]
                        ); // update date if Exist
                    } else {
                        DB::insert(
                            "insert into `never_expire` ( `username`, `todate`,`last_update`) VALUES (?, ?, ?)",
                            [$user->username, $nextDate, NOW()]
                        ); // insert date if not Exist
                    }
                }

                // End of Never Expire Code
                //

                session()->flash("success", "User success fully updated.");
                // return redirect()->route('users.user.index1',['status' => $status]);
                return redirect()->to($request->url);
                break;
            default:
                return redirect()->route("users.dashboard");
        }
    }

    // online users
    // public function loadOnLineUsers(Request $request){
    // 	$currentUserr = Auth::user();
    // 	$status = $currentUser->status;
    // 	switch($status){
    // 		case : "dealer"{

    // 		}break;
    // 		case : "sub_dealer"{}break;
    // 	}

    // }

    //Aslam Code

    public function singalUserData(Request $request)
    {
        $v = "";
        $usersCollection = [];
        $dealerid = Auth::user()->dealerid;
        $subdealerid = Auth::user()->sub_dealer_id;
        $trader_id = Auth::user()->trader_id;
        $currentStatus = Auth::user()->status;
        $sbdealer = $request->get("sb");
        $id = $request->get("id");
        $st = $request->get("st");
        $tb = $request->get("tb");
        if ($id == "" || $st == "dealer") {
            return "false";
        }
        $output = "";
        if ($currentStatus == "dealer") {
            $data = userInfo::where("dealerid", $dealerid)
                ->where("id", $id)
                ->where("status", "user")
                ->select(
                    "mobilephone",
                    "username",
                    "resellerid",
                    "dealerid",
                    "sub_dealer_id",
                    "nic"
                )
                ->first();
        } elseif ($currentStatus == "subdealer") {
            $data = userInfo::where("sub_dealer_id", $subdealerid)
                ->where("id", $id)
                ->select(
                    "mobilephone",
                    "username",
                    "resellerid",
                    "dealerid",
                    "sub_dealer_id",
                    "nic"
                )
                ->first();
        } elseif ($currentStatus == "trader") {
            $data = userInfo::where("trader_id", $trader_id)
                ->where("id", $id)
                ->select(
                    "mobilephone",
                    "username",
                    "resellerid",
                    "dealerid",
                    "sub_dealer_id",
                    "nic",
                    "trader_id"
                )
                ->first();
        } elseif ($currentStatus == "inhouse") {
            $data = userInfo::where("id", $id)
                ->select(
                    "mobilephone",
                    "username",
                    "resellerid",
                    "dealerid",
                    "sub_dealer_id",
                    "nic"
                )
                ->first();
        }

        $verifyCode = "";
        $up_on = "";
        $status = "";
        $resendCode = UserVerification::where("username", $data["username"])
            ->select("verificationCode", "update_on", "mobile_status")
            ->first();
        $verifyCode = $resendCode["verificationCode"];
        $up_on = $resendCode["update_on"];
        $status = $resendCode["mobile_status"];
        $curdate = date("Y-m-d H:i:s");
        if ($curdate < $up_on) {
            if ($status == "" && $verifyCode != "") {
                return "false";
            }
        } elseif ($status == "" && $verifyCode != "") {
            return "false";
        }

        $verimob = "";
        $vericnic = "";
        $isverify = UserVerification::where("username", $data["username"])
            ->select("mobile_status", "cnic")
            ->first();
        $verimob = $isverify["mobile_status"];
        $vericnic = $isverify["cnic"];
        ?>
				<!-- Mobile Verification -->
				<input type="hidden" name="uName" id="uName" value="<?php echo $data[
        "username"
    ]; ?>">
				<input type="hidden" name="dealerid" id="dealerid" value="<?php echo $data[
        "dealerid"
    ]; ?>">
				<input type="hidden" name="subDid" id="subDid" value="<?php echo $data[
        "sub_dealer_id"
    ]; ?>">
				<input type="hidden" name="resId" id="resId" value="<?php echo $data[
        "resellerid"
    ]; ?>">
				<input type="hidden" name="nic" id="nic" value="<?php echo $data["nic"]; ?>">
				<input  class="form-control" name="mobile" type="text" id="edit1" value="" size="7" maxlength="7"  minlength="7" required>
						<div class="input-group-btn">
									<button type="submit" class="btn btn-primary" style="background-color: #4878C0; color:white" >
										<span class="glyphicon glyphicon-check"></span> Verify
								</button>
						</div>

<?php
    }
    public function singalUserData1(Request $request)
    {
        $v = "";
        $usersCollection = [];
        $dealerid = Auth::user()->dealerid;
        $subdealerid = Auth::user()->sub_dealer_id;
        $currentStatus = Auth::user()->status;

        $id = $request->get("id");

        $output = "";
        if ($currentStatus == "dealer") {
            $data = userInfo::where("id", $id)
                ->select(
                    "mobilephone",
                    "username",
                    "resellerid",
                    "dealerid",
                    "sub_dealer_id",
                    "nic"
                )
                ->first();
        } elseif ($currentStatus == "subdealer") {
            $data = userInfo::where("sub_dealer_id", $subdealerid)
                ->where("id", $id)
                ->select(
                    "mobilephone",
                    "username",
                    "resellerid",
                    "dealerid",
                    "sub_dealer_id",
                    "nic"
                )
                ->first();
        }

        $verifyCode = "";
        $up_on = "";
        $status = "";
        $resendCode = UserVerification::where("username", $data["username"])
            ->select("verificationCode", "update_on", "mobile_status")
            ->first();
        $verifyCode = $resendCode["verificationCode"];
        $up_on = $resendCode["update_on"];
        $status = $resendCode["mobile_status"];
        $curdate = date("Y-m-d H:i:s");
        if ($curdate < $up_on) {
            if ($status == "" && $verifyCode != "") {
                return "false";
            }
        } elseif ($status == "" && $verifyCode != "") {
            return "false";
        }

        $verimob = "";
        $vericnic = "";
        $isverify = UserVerification::where("username", $data["username"])
            ->select("mobile_status", "cnic")
            ->first();
        $verimob = $isverify["mobile_status"];
        $vericnic = $isverify["cnic"];
        ?>
				<!-- Mobile Verification -->
				<input type="hidden" name="uName" id="uName" value="<?php echo $data[
        "username"
    ]; ?>">
				<input type="hidden" name="dealerid" id="dealerid" value="<?php echo $data[
        "dealerid"
    ]; ?>">
				<input type="hidden" name="subDid" id="subDid" value="<?php echo $data[
        "sub_dealer_id"
    ]; ?>">
				<input type="hidden" name="resId" id="resId" value="<?php echo $data[
        "resellerid"
    ]; ?>">
				<input type="hidden" name="nic" id="nic" value="<?php echo $data["nic"]; ?>">
				<input  class="form-control" name="mobile" type="text" id="edit1" value="" size="7" maxlength="7"  minlength="7" required>
						<div class="input-group-btn">
									<button type="submit" class="btn btn-primary" style="background-color: #4878C0; color:white" >
										<span class="glyphicon glyphicon-check"></span> Verify
								</button>
						</div>

<?php
    }

    // ////////
    public function clearMac(Request $request)
    {
        $username = $request->get("clearmac");
        $userid = $request->get("userid");

        $user = UserInfo::where(["username" => $username])->first();

        $userRadCheck = RadCheck::where([
            "username" => $user->username,
            "attribute" => "Cleartext-Password",
        ])->first();
        $userstatusinfo = UserStatusInfo::where([
            "username" => $user->username,
        ])->first();
        $userexpirelog = UserExpireLog::where([
            "username" => $user->username,
        ])->first();
        $package = $user->profile;

        $package = str_replace("BE-", "", $package);
        $package = str_replace("k", "", $package);
        $profile = Profile::where(["groupname" => $package])->first();

        $clearMac = RadCheck::where([
            "username" => $username,
            "attribute" => "Calling-Station-Id",
        ])->first();
        $clearMac->value = "NEW";
        $clearMac->save();

        return redirect()->route("users.user.show", [
            "status" => "user",
            "id" => $userid,
        ]);
    }
    ////

    ////enable disabled
    public function enableDisable(Request $request)
    {
        $username = $request->get("username");
        $userid = $request->get("userid");

        $getprofile = RaduserGroup::select("groupname")
            ->where(["username" => $username])
            ->first();
        $profile = $getprofile->groupname;
        if ($profile == "DISABLED") {
            //
            $userInfo = UserInfo::where(["username" => $username])->first();
            $oldprofile = $userInfo->disabled_old_profile;
            //
            $userInfo->profile = $oldprofile;
            $userInfo->disabled_old_profile = null;

            $userInfo->save();
            //
            $radusergroup = RaduserGroup::where([
                "username" => $username,
            ])->first();

            
            $package = $oldprofile;
            // dd($package);
            $package = str_replace("BE-", "", $package);
            $package = str_replace("k", "", $package);
            $package = str_replace("-Xtreme", "", $package);
                
            $userdata = Profile::where('groupname',$package)->first();
            // dd($userdata);
			$code = $userdata['code'];
            $code = $code != 'cyber' ? '-'.$code : '';
            // dd($code);

            $radusergroup->groupname = 'BE-'.$package.'k'.$code;
            // $radusergroup->groupname = $oldprofile.$code;
            $radusergroup->save();
            //
            $disabled_user = DisabledUser::where([
                "username" => $username,
            ])->first();
            $disabled_user->status = "enable";
            $disabled_user->updated_by = Auth::user()->status;
            $disabled_user->last_update = date("Y-m-d H:i:s");
            $disabled_user->save();
            //
        } else {
            //
            $radusergroup = RaduserGroup::where([
                "username" => $username,
            ])->first();
            $radusergroup->groupname = "DISABLED";
            // $radusergroup->name  = 'DISABLED';
            $radusergroup->save();
            //
            $userInfo = UserInfo::where(["username" => $username])->first();
            $profile = $userInfo->profile;
            $userInfo->disabled_old_profile = $profile;
            $userInfo->profile = "DISABLED";

            $userInfo->save();
            //
            $disabled_user = DisabledUser::where([
                "username" => $username,
            ])->first();
            if ($disabled_user != null) {
                $disabled_user->status = "disable";
                $disabled_user->updated_by = Auth::user()->status;
                $disabled_user->last_update = date("Y-m-d H:i:s");
                $disabled_user->save();
            } else {
                $insert = new DisabledUser();
                $insert->username = $username;
                $insert->status = "disable";
                $insert->updated_by = Auth::user()->status;
                $insert->last_update = date("Y-m-d H:i:s");
                $insert->save();
            }
            //
        }
        $url = "http://192.168.100.99/api/index.php?username=" . $username;

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "$url");
        //
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        $result = curl_exec($ch);

        return redirect()->route("users.user.show", [
            "status" => "user",
            "id" => $userid,
        ]);
    }
    public function changePass(Request $request)
    {
        $uName = $request->get("user");
        $repass = $request->get("repass");
        $pass = Hash::make($request->get("pass"));
        $redpass = $request->get("pass");
        // $userinfo = UserInfo::where("username", $uName)->first();
        // $checkOldPassword = Hash::check($userinfo->password);
        // if($checkOldPassword == )

        $userinfo = UserInfo::where("username", $uName);
        $userinfo->update([
            "password" => $pass,
        ]);

        $redcheck = RadCheck::where("username", $uName)->where(
            "attribute",
            "Cleartext-Password"
        );
        $redcheck->update([
            "value" => $redpass,
        ]);
        return redirect()->route("users.dashboard");
    }
    ///

    public function changePlan(Request $request)
    {
        $username = $request->get("username");
        $plan = $request->get("plan");

        $today = date("Y-m-d H:i:s");
        $today1 = strtotime($today);
        if ($today < date("Y-m-25 12:00:00")) {
            $plandate = date("Y-m-25");
        } else {
            $plandate = date("Y-m-25", strtotime("+1 month", $today1));
        }

        $userdata = UserInfo::where("username", $username)->first();
        $userAmount = UserAmount::where("username", $username)->first();

        $checkDealerPlan = DealerProfileRate::where(
            "dealerid",
            $userdata->dealerid
        )->first();
        $currentplan = $checkDealerPlan["taxgroup"];
        if ($plan == $currentplan) {
            session()->flash(
                "error",
                "Your current plan and requrest plan both are same."
            );
            return redirect()->route("users.user.index1", ["status" => "plan"]);
        }

        $amount = $userAmount->amount;

        if ($amount > 5000) {
            $allready = ChangePlan::where("username", $username)
                ->where("change_plan", $plandate)
                ->first();
            if (empty($allready)) {
                $changeplan = new ChangePlan();
                $changeplan->username = $username;
                $changeplan->dealerid = $userdata->dealerid;
                $changeplan->sub_dealer_id = $userdata->sub_dealer_id;
                $changeplan->change_plan = $plandate;
                $changeplan->request_date = date("Y-m-d H:i:s");
                $changeplan->amount = 5000;
                $changeplan->plan_name = $plan;
                $changeplan->request_by = Auth::user()->username;
                $changeplan->status = 1;
                $changeplan->save();

                $userAmount->amount = $amount - 5000;
                $userAmount->save();
            } else {
                $status = $allready->status;
                if ($status == "1") {
                    session()->flash(
                        "error",
                        "Your Request are Allready in Process."
                    );
                    return redirect()->route("users.user.index1", [
                        "status" => "plan",
                    ]);
                } else {
                    $changeplan->username = $username;
                    $changeplan->dealerid = $userdata->dealerid;
                    $changeplan->sub_dealer_id = $userdata->sub_dealer_id;
                    $changeplan->change_plan = $plandate;
                    $changeplan->request_date = date("Y-m-d H:i:s");
                    $changeplan->amount = 5000;
                    $changeplan->plan_name = $plan;
                    $changeplan->request_by = Auth::user()->username;
                    $changeplan->status = 1;
                    $changeplan->save();

                    $userAmount->amount = $amount - 5000;
                    $userAmount->save();
                }
            }
        } else {
            session()->flash("error", "Your Amount is less then 5,000.");
            return redirect()->route("users.user.index1", ["status" => "plan"]);
        }

        session()->flash("success", "Plan success fully updated.");
        return redirect()->route("users.user.index1", ["status" => "plan"]);
    }

    public function userTerminated(Request $requrest)
    {
        $username = $requrest->get("username");
        $expireUsers = ExpireUser::where(["username" => $username])->first();
        $expireUsers->connection = "terminate";
        $expireUsers->save();
        $pdf = PDF::loadView("users.billing.terminate_PDF");
        return $pdf->stream($username . ".pdf");
    }
    public function cirProfile(Request $request)
    {
        $username = $request->username;
        $profile = $request->profile;
        $status = $request->check;
        $name = $request->name;
        $group = ['NEW','EXPIRED','TERMINATE','DISABLED'];
        
        $checkGroup = RaduserGroup::where('username',$username)->first();
        if(in_array($checkGroup->groupname,$group)){
            // Do Nothing....
        }else{
            //Do This...
        if($status == 'true'){
            //store/update data in ciruserprofile table
            $newUser = Cirprofile::updateOrCreate([
                //Add unique field combo to match here
                'username'   => $username,
            ],[
                'profile'     => $profile,
                'name'       => $name,
                'status' => 1
            ]);
            //update profile radius
            $updateProfile = RaduserGroup::where('username',$username);
            $updateProfile->update([
                'groupname' => $profile.'-p',
                'name' => 'pure-'.$name
            ]);
            //API Call for DC user
            $url='http://192.168.100.99/api/index.php?username='.$username;
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, "$url"); 
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            $result = curl_exec($ch);
        }
        else{
             //store/update data in ciruserprofile table
             $newUser = Cirprofile::updateOrCreate([
                //Add unique field combo to match here
                'username'   => $username,
            ],[
                'profile'     => $profile,
                'name'       => $name,
                'status' => 0
            ]);
            //update profile radius
            $updateProfile = RaduserGroup::where('username',$username);
            $updateProfile->update([
                'groupname' => $profile,
                'name' => $name
            ]);
            //API Call for DC user
            $url='http://192.168.100.99/api/index.php?username='.$username;
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, "$url"); 
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
            $result = curl_exec($ch);

        }
    }
  }
  function smsTest(){
    // // http://cp.lbi.net.pk/member/Aslam
    // $uriSegments = explode("/", parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH));
    // echo $_SERVER['REQUEST_URI']; // IT will print /member/Aslam
    // echo $uriSegments[1]; // It mwill print member
    // echo $uriSegments[2]; // It mwill print Aslam

    // $result = $uriSegments[2] == 'Aslam' ? 'Action you want' : 'redirect';
    // echo $result;

    //   $number = '03093330057';
    //   $msg = 'Testt1';
    // $ch = curl_init();
    // curl_setopt($ch, CURLOPT_URL, "https://pk.eocean.us/APIManagement/API/RequestAPI?user=logon_eocean&pwd=AHxZnVT%2bBVEWxMbcYWpXrDmQPVSh0j1VHOlDNKk8noYbZTykx9BertRppilaadH5Bw%3d%3d&sender=Logon&reciever=$number&msg-data=$msg&response=string");
    // curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    // $result = curl_exec($ch);
    echo 'done';
}
}
